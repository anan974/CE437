
Lab06_SensorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005370  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800547c  0800547c  0000647c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f4  080056f4  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  080056f4  080056f4  000066f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056fc  080056fc  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056fc  080056fc  000066fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005700  08005700  00006700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005704  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000084  08005788  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08005788  00007520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bde  00000000  00000000  000070ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003107  00000000  00000000  0001ac8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0001dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e84  00000000  00000000  0001f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a287  00000000  00000000  0001fec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017983  00000000  00000000  0003a14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000922f9  00000000  00000000  00051ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3dc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052a0  00000000  00000000  000e3e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e90ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08005464 	.word	0x08005464

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08005464 	.word	0x08005464

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CAN_ComInit_Std>:
CAN_RxHeaderTypeDef RxHeader;
CAN_FilterTypeDef canfilterconfig;
uint8_t RxData[8];

void CAN_ComInit_Std(CAN_TxHeaderTypeDef *Tx_Header, CAN_HandleTypeDef *hcan, uint32_t id, uint8_t dlc)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	70fb      	strb	r3, [r7, #3]
	Tx_Header->IDE = CAN_ID_STD;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	2200      	movs	r2, #0
 800016e:	609a      	str	r2, [r3, #8]
	Tx_Header->DLC = dlc;
 8000170:	78fa      	ldrb	r2, [r7, #3]
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	611a      	str	r2, [r3, #16]
	Tx_Header->StdId = id;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	601a      	str	r2, [r3, #0]
	Tx_Header->RTR = CAN_RTR_DATA;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2200      	movs	r2, #0
 8000180:	60da      	str	r2, [r3, #12]
	HAL_CAN_Start(hcan);
 8000182:	68b8      	ldr	r0, [r7, #8]
 8000184:	f001 fb88 	bl	8001898 <HAL_CAN_Start>
}
 8000188:	bf00      	nop
 800018a:	3710      	adds	r7, #16
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}

08000190 <CAN_FilterInit_SingleFF0>:

void CAN_FilterInit_SingleFF0(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *canfilterconfig, uint32_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0
 8000196:	60f8      	str	r0, [r7, #12]
 8000198:	60b9      	str	r1, [r7, #8]
 800019a:	607a      	str	r2, [r7, #4]
	canfilterconfig->FilterActivation = CAN_FILTER_ENABLE;
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	2201      	movs	r2, #1
 80001a0:	621a      	str	r2, [r3, #32]
	canfilterconfig->FilterBank = 0;
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	2200      	movs	r2, #0
 80001a6:	615a      	str	r2, [r3, #20]
	canfilterconfig->FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001a8:	68bb      	ldr	r3, [r7, #8]
 80001aa:	2200      	movs	r2, #0
 80001ac:	611a      	str	r2, [r3, #16]
	canfilterconfig->FilterIdHigh = addr << 5;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	015a      	lsls	r2, r3, #5
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	601a      	str	r2, [r3, #0]
	canfilterconfig->FilterIdLow = 0x0000;
 80001b6:	68bb      	ldr	r3, [r7, #8]
 80001b8:	2200      	movs	r2, #0
 80001ba:	605a      	str	r2, [r3, #4]
	canfilterconfig->FilterMaskIdHigh = addr << 5;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	015a      	lsls	r2, r3, #5
 80001c0:	68bb      	ldr	r3, [r7, #8]
 80001c2:	609a      	str	r2, [r3, #8]
	canfilterconfig->FilterMaskIdLow = 0x0000;
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	2200      	movs	r2, #0
 80001c8:	60da      	str	r2, [r3, #12]
	canfilterconfig->FilterMode = CAN_FILTERMODE_IDMASK;
 80001ca:	68bb      	ldr	r3, [r7, #8]
 80001cc:	2200      	movs	r2, #0
 80001ce:	619a      	str	r2, [r3, #24]
	canfilterconfig->FilterScale = CAN_FILTERSCALE_32BIT;
 80001d0:	68bb      	ldr	r3, [r7, #8]
 80001d2:	2201      	movs	r2, #1
 80001d4:	61da      	str	r2, [r3, #28]

	HAL_CAN_ConfigFilter(hcan, canfilterconfig);
 80001d6:	68b9      	ldr	r1, [r7, #8]
 80001d8:	68f8      	ldr	r0, [r7, #12]
 80001da:	f001 fa94 	bl	8001706 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001de:	2102      	movs	r1, #2
 80001e0:	68f8      	ldr	r0, [r7, #12]
 80001e2:	f001 fd8d 	bl	8001d00 <HAL_CAN_ActivateNotification>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
	...

080001f0 <CAN_Transmit>:

uint32_t CAN_Transmit(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *Tx_Header, uint8_t* buffer)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
	HAL_CAN_AddTxMessage(hcan, Tx_Header, buffer, &Mailbox);
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <CAN_Transmit+0x24>)
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	68b9      	ldr	r1, [r7, #8]
 8000202:	68f8      	ldr	r0, [r7, #12]
 8000204:	f001 fb8c 	bl	8001920 <HAL_CAN_AddTxMessage>
	return Mailbox;
 8000208:	4b02      	ldr	r3, [pc, #8]	@ (8000214 <CAN_Transmit+0x24>)
 800020a:	681b      	ldr	r3, [r3, #0]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	200000b8 	.word	0x200000b8

08000218 <TOF_InitStruct>:
const size_t registered_sensors_cnt = _VL53L1X_MAX_SENSORS;
static int (*vl53l1x_log_func)(const char*, ...) = NULL;

// Function definitions
int TOF_InitStruct(VL53L1X* sensor, I2C_HandleTypeDef* hi2c, uint8_t address, GPIO_TypeDef* xshut_port, uint16_t xshut_pin)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	4613      	mov	r3, r2
 8000226:	71fb      	strb	r3, [r7, #7]
	if (address == 0x29)
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	2b29      	cmp	r3, #41	@ 0x29
 800022c:	d107      	bne.n	800023e <TOF_InitStruct+0x26>
		_VL53L1X_LOG("Trying to set 0x29 as the address for the ToF, this can cause issues\r\n");
 800022e:	4b1f      	ldr	r3, [pc, #124]	@ (80002ac <TOF_InitStruct+0x94>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d003      	beq.n	800023e <TOF_InitStruct+0x26>
 8000236:	4b1d      	ldr	r3, [pc, #116]	@ (80002ac <TOF_InitStruct+0x94>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	481d      	ldr	r0, [pc, #116]	@ (80002b0 <TOF_InitStruct+0x98>)
 800023c:	4798      	blx	r3

	sensor->hi2c = hi2c;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]

	sensor->xshut_port = xshut_port;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	609a      	str	r2, [r3, #8]
	sensor->xshut_pin = xshut_pin;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	8c3a      	ldrh	r2, [r7, #32]
 8000254:	819a      	strh	r2, [r3, #12]

	// Find free slot
	uint8_t id;
	for (id = 0; (id < _VL53L1X_MAX_SENSORS) && registered_sensors[id] != NULL; id++);
 8000256:	2300      	movs	r3, #0
 8000258:	75fb      	strb	r3, [r7, #23]
 800025a:	e002      	b.n	8000262 <TOF_InitStruct+0x4a>
 800025c:	7dfb      	ldrb	r3, [r7, #23]
 800025e:	3301      	adds	r3, #1
 8000260:	75fb      	strb	r3, [r7, #23]
 8000262:	7dfb      	ldrb	r3, [r7, #23]
 8000264:	2b09      	cmp	r3, #9
 8000266:	d805      	bhi.n	8000274 <TOF_InitStruct+0x5c>
 8000268:	7dfb      	ldrb	r3, [r7, #23]
 800026a:	4a12      	ldr	r2, [pc, #72]	@ (80002b4 <TOF_InitStruct+0x9c>)
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1f3      	bne.n	800025c <TOF_InitStruct+0x44>

	if (id >= _VL53L1X_MAX_SENSORS)
 8000274:	7dfb      	ldrb	r3, [r7, #23]
 8000276:	2b09      	cmp	r3, #9
 8000278:	d90b      	bls.n	8000292 <TOF_InitStruct+0x7a>
	{
		_VL53L1X_LOG("Added too many sensors, increase _VL53L1X_MAX_SENSORS value, currently %d\r\n", registered_sensors_cnt);
 800027a:	4b0c      	ldr	r3, [pc, #48]	@ (80002ac <TOF_InitStruct+0x94>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d005      	beq.n	800028e <TOF_InitStruct+0x76>
 8000282:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <TOF_InitStruct+0x94>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	220a      	movs	r2, #10
 8000288:	4611      	mov	r1, r2
 800028a:	480b      	ldr	r0, [pc, #44]	@ (80002b8 <TOF_InitStruct+0xa0>)
 800028c:	4798      	blx	r3
		return 1;
 800028e:	2301      	movs	r3, #1
 8000290:	e008      	b.n	80002a4 <TOF_InitStruct+0x8c>
	}

	sensor->id = id;
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	7dfa      	ldrb	r2, [r7, #23]
 8000296:	739a      	strb	r2, [r3, #14]
	registered_sensors[id] = sensor;
 8000298:	7dfb      	ldrb	r3, [r7, #23]
 800029a:	4906      	ldr	r1, [pc, #24]	@ (80002b4 <TOF_InitStruct+0x9c>)
 800029c:	68fa      	ldr	r2, [r7, #12]
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return 0;
 80002a2:	2300      	movs	r3, #0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3718      	adds	r7, #24
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000130 	.word	0x20000130
 80002b0:	0800547c 	.word	0x0800547c
 80002b4:	20000108 	.word	0x20000108
 80002b8:	080054d0 	.word	0x080054d0

080002bc <TOF_TurnOn>:

void TOF_TurnOn(const VL53L1X* sensor)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_SET);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	6898      	ldr	r0, [r3, #8]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	899b      	ldrh	r3, [r3, #12]
 80002cc:	2201      	movs	r2, #1
 80002ce:	4619      	mov	r1, r3
 80002d0:	f002 f9f0 	bl	80026b4 <HAL_GPIO_WritePin>
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <TOF_TurnOff>:

void TOF_TurnOff(const VL53L1X* sensor)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_RESET);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6898      	ldr	r0, [r3, #8]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	899b      	ldrh	r3, [r3, #12]
 80002ec:	2200      	movs	r2, #0
 80002ee:	4619      	mov	r1, r3
 80002f0:	f002 f9e0 	bl	80026b4 <HAL_GPIO_WritePin>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <TOF_BootSensor>:

	return status;
}

int TOF_BootSensor(VL53L1X* sensor)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	int status = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
	TOF_TurnOn(sensor);
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f7ff ffd7 	bl	80002bc <TOF_TurnOn>
    HAL_Delay(2); // Sometimes this is too fast and line can't settle
 800030e:	2002      	movs	r0, #2
 8000310:	f001 f8da 	bl	80014c8 <HAL_Delay>

    // Check if sensor is already configured with the correct address
    uint16_t id = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	813b      	strh	r3, [r7, #8]
    if (VL53L1X_GetSensorId(sensor->id, &id) != 0)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	7b9b      	ldrb	r3, [r3, #14]
 800031c:	461a      	mov	r2, r3
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	4619      	mov	r1, r3
 8000324:	4610      	mov	r0, r2
 8000326:	f000 f9d2 	bl	80006ce <VL53L1X_GetSensorId>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d029      	beq.n	8000384 <TOF_BootSensor+0x88>
    {
    	uint8_t real_address = sensor->address;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	791b      	ldrb	r3, [r3, #4]
 8000334:	72fb      	strb	r3, [r7, #11]
    	sensor->address = 0x29;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2229      	movs	r2, #41	@ 0x29
 800033a:	711a      	strb	r2, [r3, #4]

    	status = VL53L1X_SetI2CAddress(sensor->id, real_address);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	7b9b      	ldrb	r3, [r3, #14]
 8000340:	461a      	mov	r2, r3
 8000342:	7afb      	ldrb	r3, [r7, #11]
 8000344:	4619      	mov	r1, r3
 8000346:	4610      	mov	r0, r2
 8000348:	f000 f890 	bl	800046c <VL53L1X_SetI2CAddress>
 800034c:	4603      	mov	r3, r0
 800034e:	60fb      	str	r3, [r7, #12]
    	//status = VL53L1X_SetI2CAddress(sensor->id, sensor->address);
    	sensor->address = real_address;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	7afa      	ldrb	r2, [r7, #11]
 8000354:	711a      	strb	r2, [r3, #4]

    	if (status != 0)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d013      	beq.n	8000384 <TOF_BootSensor+0x88>
    	{
    		if (sensor->address == 0x20) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	791b      	ldrb	r3, [r3, #4]
 8000360:	2b20      	cmp	r3, #32
 8000362:	d103      	bne.n	800036c <TOF_BootSensor+0x70>
    			status = 1;
 8000364:	2301      	movs	r3, #1
 8000366:	60fb      	str	r3, [r7, #12]
    			return status;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	e049      	b.n	8000400 <TOF_BootSensor+0x104>
    		}
    		else if (sensor->address == 0x26) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	791b      	ldrb	r3, [r3, #4]
 8000370:	2b26      	cmp	r3, #38	@ 0x26
 8000372:	d103      	bne.n	800037c <TOF_BootSensor+0x80>
    			status = 2;
 8000374:	2302      	movs	r3, #2
 8000376:	60fb      	str	r3, [r7, #12]
    			return status;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	e041      	b.n	8000400 <TOF_BootSensor+0x104>
    		}
    		else {
    			status = 9;
 800037c:	2309      	movs	r3, #9
 800037e:	60fb      	str	r3, [r7, #12]
    			return status;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	e03d      	b.n	8000400 <TOF_BootSensor+0x104>
    		return status;
    	}
    }

	// Initialise sensor
    status = VL53L1X_SensorInit(sensor->id);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	7b9b      	ldrb	r3, [r3, #14]
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f88b 	bl	80004a4 <VL53L1X_SensorInit>
 800038e:	4603      	mov	r3, r0
 8000390:	60fb      	str	r3, [r7, #12]
	if (status)
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d00e      	beq.n	80003b6 <TOF_BootSensor+0xba>
	{
		status = 3;
 8000398:	2303      	movs	r3, #3
 800039a:	60fb      	str	r3, [r7, #12]
		_VL53L1X_LOG("Unable to initialise sensor 0x%02X\r\n", sensor->address);
 800039c:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <TOF_BootSensor+0x10c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d006      	beq.n	80003b2 <TOF_BootSensor+0xb6>
 80003a4:	4b18      	ldr	r3, [pc, #96]	@ (8000408 <TOF_BootSensor+0x10c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	7912      	ldrb	r2, [r2, #4]
 80003ac:	4611      	mov	r1, r2
 80003ae:	4817      	ldr	r0, [pc, #92]	@ (800040c <TOF_BootSensor+0x110>)
 80003b0:	4798      	blx	r3
		return status;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	e024      	b.n	8000400 <TOF_BootSensor+0x104>
	}
	status = VL53L1X_StartRanging(sensor->id);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	7b9b      	ldrb	r3, [r3, #14]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f920 	bl	8000600 <VL53L1X_StartRanging>
 80003c0:	4603      	mov	r3, r0
 80003c2:	60fb      	str	r3, [r7, #12]
	if (status)
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d00e      	beq.n	80003e8 <TOF_BootSensor+0xec>
	{
		status = 4;
 80003ca:	2304      	movs	r3, #4
 80003cc:	60fb      	str	r3, [r7, #12]
		_VL53L1X_LOG("Unable to start measurements on sensor 0x%02X\r\n", sensor->address);
 80003ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <TOF_BootSensor+0x10c>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d006      	beq.n	80003e4 <TOF_BootSensor+0xe8>
 80003d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <TOF_BootSensor+0x10c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	7912      	ldrb	r2, [r2, #4]
 80003de:	4611      	mov	r1, r2
 80003e0:	480b      	ldr	r0, [pc, #44]	@ (8000410 <TOF_BootSensor+0x114>)
 80003e2:	4798      	blx	r3
		return status;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	e00b      	b.n	8000400 <TOF_BootSensor+0x104>
	}

	_VL53L1X_LOG("Sensor 0x%02X configured successfully\r\n", sensor->address);
 80003e8:	4b07      	ldr	r3, [pc, #28]	@ (8000408 <TOF_BootSensor+0x10c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d006      	beq.n	80003fe <TOF_BootSensor+0x102>
 80003f0:	4b05      	ldr	r3, [pc, #20]	@ (8000408 <TOF_BootSensor+0x10c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	7912      	ldrb	r2, [r2, #4]
 80003f8:	4611      	mov	r1, r2
 80003fa:	4806      	ldr	r0, [pc, #24]	@ (8000414 <TOF_BootSensor+0x118>)
 80003fc:	4798      	blx	r3
	return 0;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000130 	.word	0x20000130
 800040c:	08005528 	.word	0x08005528
 8000410:	08005558 	.word	0x08005558
 8000414:	08005594 	.word	0x08005594

08000418 <TOF_GetDistance>:

uint16_t TOF_GetDistance(const VL53L1X* sensor)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	uint16_t reading = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	81fb      	strh	r3, [r7, #14]
	if(VL53L1X_GetDistance(sensor->id, &reading) != 0)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	7b9b      	ldrb	r3, [r3, #14]
 8000428:	461a      	mov	r2, r3
 800042a:	f107 030e 	add.w	r3, r7, #14
 800042e:	4619      	mov	r1, r3
 8000430:	4610      	mov	r0, r2
 8000432:	f000 f96c 	bl	800070e <VL53L1X_GetDistance>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d00d      	beq.n	8000458 <TOF_GetDistance+0x40>
	{
		_VL53L1X_LOG("Failed to read distance from sensor 0x%02X\r\n", sensor->address);
 800043c:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <TOF_GetDistance+0x4c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d006      	beq.n	8000452 <TOF_GetDistance+0x3a>
 8000444:	4b07      	ldr	r3, [pc, #28]	@ (8000464 <TOF_GetDistance+0x4c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	7912      	ldrb	r2, [r2, #4]
 800044c:	4611      	mov	r1, r2
 800044e:	4806      	ldr	r0, [pc, #24]	@ (8000468 <TOF_GetDistance+0x50>)
 8000450:	4798      	blx	r3
		return 0xFFFF; // VL53L1X_GetDistance() returns the reading for previous sensor if reading failed
 8000452:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000456:	e000      	b.n	800045a <TOF_GetDistance+0x42>
	}
	return reading;
 8000458:	89fb      	ldrh	r3, [r7, #14]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000130 	.word	0x20000130
 8000468:	080055c8 	.word	0x080055c8

0800046c <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	460a      	mov	r2, r1
 8000476:	80fb      	strh	r3, [r7, #6]
 8000478:	4613      	mov	r3, r2
 800047a:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 8000480:	797a      	ldrb	r2, [r7, #5]
 8000482:	88fb      	ldrh	r3, [r7, #6]
 8000484:	2101      	movs	r1, #1
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fef2 	bl	8001270 <VL53L1_WrByte>
 800048c:	4603      	mov	r3, r0
 800048e:	461a      	mov	r2, r3
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	4313      	orrs	r3, r2
 8000494:	73fb      	strb	r3, [r7, #15]
	return status;
 8000496:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 80004b2:	2300      	movs	r3, #0
 80004b4:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80004b6:	232d      	movs	r3, #45	@ 0x2d
 80004b8:	73bb      	strb	r3, [r7, #14]
 80004ba:	e011      	b.n	80004e0 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80004bc:	7bbb      	ldrb	r3, [r7, #14]
 80004be:	b299      	uxth	r1, r3
 80004c0:	7bbb      	ldrb	r3, [r7, #14]
 80004c2:	3b2d      	subs	r3, #45	@ 0x2d
 80004c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000578 <VL53L1X_SensorInit+0xd4>)
 80004c6:	5cd2      	ldrb	r2, [r2, r3]
 80004c8:	88fb      	ldrh	r3, [r7, #6]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fed0 	bl	8001270 <VL53L1_WrByte>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80004da:	7bbb      	ldrb	r3, [r7, #14]
 80004dc:	3301      	adds	r3, #1
 80004de:	73bb      	strb	r3, [r7, #14]
 80004e0:	7bbb      	ldrb	r3, [r7, #14]
 80004e2:	2b87      	cmp	r3, #135	@ 0x87
 80004e4:	d9ea      	bls.n	80004bc <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 f889 	bl	8000600 <VL53L1X_StartRanging>
 80004ee:	4603      	mov	r3, r0
 80004f0:	461a      	mov	r2, r3
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 80004fc:	e00b      	b.n	8000516 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80004fe:	f107 020d 	add.w	r2, r7, #13
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	4611      	mov	r1, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f8aa 	bl	8000660 <VL53L1X_CheckForDataReady>
 800050c:	4603      	mov	r3, r0
 800050e:	461a      	mov	r2, r3
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	4313      	orrs	r3, r2
 8000514:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8000516:	7b7b      	ldrb	r3, [r7, #13]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0f0      	beq.n	80004fe <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 800051c:	88fb      	ldrh	r3, [r7, #6]
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f82c 	bl	800057c <VL53L1X_ClearInterrupt>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	4313      	orrs	r3, r2
 800052c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f87d 	bl	8000630 <VL53L1X_StopRanging>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	4313      	orrs	r3, r2
 800053e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000540:	88fb      	ldrh	r3, [r7, #6]
 8000542:	2209      	movs	r2, #9
 8000544:	2108      	movs	r1, #8
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fe92 	bl	8001270 <VL53L1_WrByte>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	4313      	orrs	r3, r2
 8000554:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	2200      	movs	r2, #0
 800055a:	210b      	movs	r1, #11
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fe87 	bl	8001270 <VL53L1_WrByte>
 8000562:	4603      	mov	r3, r0
 8000564:	461a      	mov	r2, r3
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	4313      	orrs	r3, r2
 800056a:	73fb      	strb	r3, [r7, #15]
	return status;
 800056c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	08005638 	.word	0x08005638

0800057c <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	2201      	movs	r2, #1
 800058e:	2186      	movs	r1, #134	@ 0x86
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fe6d 	bl	8001270 <VL53L1_WrByte>
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	4313      	orrs	r3, r2
 800059e:	73fb      	strb	r3, [r7, #15]
	return status;
 80005a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 80005bc:	f107 020e 	add.w	r2, r7, #14
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	2130      	movs	r1, #48	@ 0x30
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fe7f 	bl	80012c8 <VL53L1_RdByte>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 80005d4:	7bbb      	ldrb	r3, [r7, #14]
 80005d6:	f003 0310 	and.w	r3, r3, #16
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	091b      	lsrs	r3, r3, #4
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	bf0c      	ite	eq
 80005e8:	2301      	moveq	r3, #1
 80005ea:	2300      	movne	r3, #0
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	701a      	strb	r2, [r3, #0]
	return status;
 80005f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	2240      	movs	r2, #64	@ 0x40
 8000612:	2187      	movs	r1, #135	@ 0x87
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fe2b 	bl	8001270 <VL53L1_WrByte>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	4313      	orrs	r3, r2
 8000622:	73fb      	strb	r3, [r7, #15]
	return status;
 8000624:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	2200      	movs	r2, #0
 8000642:	2187      	movs	r1, #135	@ 0x87
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fe13 	bl	8001270 <VL53L1_WrByte>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	4313      	orrs	r3, r2
 8000652:	73fb      	strb	r3, [r7, #15]
	return status;
 8000654:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000670:	f107 020d 	add.w	r2, r7, #13
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff97 	bl	80005ac <VL53L1X_GetInterruptPolarity>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	4313      	orrs	r3, r2
 8000686:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000688:	f107 020e 	add.w	r2, r7, #14
 800068c:	88fb      	ldrh	r3, [r7, #6]
 800068e:	2131      	movs	r1, #49	@ 0x31
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fe19 	bl	80012c8 <VL53L1_RdByte>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	4313      	orrs	r3, r2
 800069e:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80006a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10c      	bne.n	80006c2 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	7b7a      	ldrb	r2, [r7, #13]
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d103      	bne.n	80006bc <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e002      	b.n	80006c2 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80006c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4603      	mov	r3, r0
 80006d6:	6039      	str	r1, [r7, #0]
 80006d8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	81bb      	strh	r3, [r7, #12]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 80006e2:	f107 020c 	add.w	r2, r7, #12
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	f240 110f 	movw	r1, #271	@ 0x10f
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fe23 	bl	8001338 <VL53L1_RdWord>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	73fb      	strb	r3, [r7, #15]
	*sensorId = tmp;
 80006fc:	89ba      	ldrh	r2, [r7, #12]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	801a      	strh	r2, [r3, #0]
	return status;
 8000702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b084      	sub	sp, #16
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	6039      	str	r1, [r7, #0]
 8000718:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 800071e:	f107 020c 	add.w	r2, r7, #12
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	2196      	movs	r1, #150	@ 0x96
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fe06 	bl	8001338 <VL53L1_RdWord>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	4313      	orrs	r3, r2
 8000734:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8000736:	89ba      	ldrh	r2, [r7, #12]
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	801a      	strh	r2, [r3, #0]
	return status;
 800073c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <VL53L1_BootDualSensors>:

#include "VL53L1_Handler.h"

uint8_t VL53L1_BootDualSensors(VL53L1X* sensor1, VL53L1X* sensor2)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	int status = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
	TOF_TurnOff(sensor1);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fdc0 	bl	80002dc <TOF_TurnOff>
	TOF_TurnOff(sensor2);
 800075c:	6838      	ldr	r0, [r7, #0]
 800075e:	f7ff fdbd 	bl	80002dc <TOF_TurnOff>

	status |= TOF_BootSensor(sensor1);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fdca 	bl	80002fc <TOF_BootSensor>
 8000768:	4602      	mov	r2, r0
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4313      	orrs	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
	status |= TOF_BootSensor(sensor2);
 8000770:	6838      	ldr	r0, [r7, #0]
 8000772:	f7ff fdc3 	bl	80002fc <TOF_BootSensor>
 8000776:	4602      	mov	r2, r0
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4313      	orrs	r3, r2
 800077c:	60fb      	str	r3, [r7, #12]


	return status;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	b2db      	uxtb	r3, r3
}
 8000782:	4618      	mov	r0, r3
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <VL53L1_Error_Hanlder>:

void VL53L1_Error_Hanlder(int status) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	char buffer[10];
	sprintf(buffer, "%d", (int)status);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4906      	ldr	r1, [pc, #24]	@ (80007b4 <VL53L1_Error_Hanlder+0x28>)
 800079c:	4618      	mov	r0, r3
 800079e:	f004 f9b1 	bl	8004b04 <siprintf>
	Print(buffer, 200);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	21c8      	movs	r1, #200	@ 0xc8
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fcd7 	bl	800115c <Print>
	while (1) {}
 80007ae:	bf00      	nop
 80007b0:	e7fd      	b.n	80007ae <VL53L1_Error_Hanlder+0x22>
 80007b2:	bf00      	nop
 80007b4:	08005600 	.word	0x08005600

080007b8 <VL53L1_GetDistance>:
}

uint16_t VL53L1_GetDistance(VL53L1X* sensor) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	MX_I2C1_Init();
 80007c0:	f000 f908 	bl	80009d4 <MX_I2C1_Init>
	sensor->distance = TOF_GetDistance(sensor);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff fe27 	bl	8000418 <TOF_GetDistance>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	611a      	str	r2, [r3, #16]
	return sensor->distance;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	b29b      	uxth	r3, r3
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_CAN_Init+0x68>)
 80007e6:	4a19      	ldr	r2, [pc, #100]	@ (800084c <MX_CAN_Init+0x6c>)
 80007e8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <MX_CAN_Init+0x68>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007f0:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_CAN_Init+0x68>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_CAN_Init+0x68>)
 80007f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80007fc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_CAN_Init+0x68>)
 8000800:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000804:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <MX_CAN_Init+0x68>)
 8000808:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800080c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_CAN_Init+0x68>)
 8000810:	2200      	movs	r2, #0
 8000812:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_CAN_Init+0x68>)
 8000816:	2200      	movs	r2, #0
 8000818:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_CAN_Init+0x68>)
 800081c:	2200      	movs	r2, #0
 800081e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_CAN_Init+0x68>)
 8000822:	2200      	movs	r2, #0
 8000824:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_CAN_Init+0x68>)
 8000828:	2200      	movs	r2, #0
 800082a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_CAN_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_CAN_Init+0x68>)
 8000834:	f000 fe6c 	bl	8001510 <HAL_CAN_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800083e:	f000 faee 	bl	8000e1e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000134 	.word	0x20000134
 800084c:	40006400 	.word	0x40006400

08000850 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a20      	ldr	r2, [pc, #128]	@ (80008ec <HAL_CAN_MspInit+0x9c>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d139      	bne.n	80008e4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000870:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <HAL_CAN_MspInit+0xa0>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4a1e      	ldr	r2, [pc, #120]	@ (80008f0 <HAL_CAN_MspInit+0xa0>)
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800087a:	61d3      	str	r3, [r2, #28]
 800087c:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <HAL_CAN_MspInit+0xa0>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <HAL_CAN_MspInit+0xa0>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a18      	ldr	r2, [pc, #96]	@ (80008f0 <HAL_CAN_MspInit+0xa0>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <HAL_CAN_MspInit+0xa0>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	4619      	mov	r1, r3
 80008b4:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <HAL_CAN_MspInit+0xa4>)
 80008b6:	f001 fd79 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	4809      	ldr	r0, [pc, #36]	@ (80008f4 <HAL_CAN_MspInit+0xa4>)
 80008d0:	f001 fd6c 	bl	80023ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	2014      	movs	r0, #20
 80008da:	f001 fd30 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80008de:	2014      	movs	r0, #20
 80008e0:	f001 fd49 	bl	8002376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40006400 	.word	0x40006400
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800

080008f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090c:	4b2e      	ldr	r3, [pc, #184]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a2d      	ldr	r2, [pc, #180]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000924:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a27      	ldr	r2, [pc, #156]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800092a:	f043 0320 	orr.w	r3, r3, #32
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b25      	ldr	r3, [pc, #148]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0320 	and.w	r3, r3, #32
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a21      	ldr	r2, [pc, #132]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a1b      	ldr	r2, [pc, #108]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO10_Pin|XSHUT1_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000972:	4816      	ldr	r0, [pc, #88]	@ (80009cc <MX_GPIO_Init+0xd4>)
 8000974:	f001 fe9e 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|XSHUT2_Pin
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 800097e:	4814      	ldr	r0, [pc, #80]	@ (80009d0 <MX_GPIO_Init+0xd8>)
 8000980:	f001 fe98 	bl	80026b4 <HAL_GPIO_WritePin>
                          |GPIO11_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO10_Pin|XSHUT1_Pin;
 8000984:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <MX_GPIO_Init+0xd4>)
 800099e:	f001 fd05 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|XSHUT2_Pin
 80009a2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80009a6:	613b      	str	r3, [r7, #16]
                          |GPIO11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	4619      	mov	r1, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_GPIO_Init+0xd8>)
 80009bc:	f001 fcf6 	bl	80023ac <HAL_GPIO_Init>

}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40011000 	.word	0x40011000
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009da:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <MX_I2C1_Init+0x54>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009e0:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <MX_I2C1_Init+0x58>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a12:	f001 fe67 	bl	80026e4 <HAL_I2C_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a1c:	f000 f9ff 	bl	8000e1e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000015c 	.word	0x2000015c
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	00061a80 	.word	0x00061a80

08000a30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a15      	ldr	r2, [pc, #84]	@ (8000aa0 <HAL_I2C_MspInit+0x70>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d123      	bne.n	8000a98 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a13      	ldr	r2, [pc, #76]	@ (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a68:	23c0      	movs	r3, #192	@ 0xc0
 8000a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480b      	ldr	r0, [pc, #44]	@ (8000aa8 <HAL_I2C_MspInit+0x78>)
 8000a7c:	f001 fc96 	bl	80023ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a82:	69db      	ldr	r3, [r3, #28]
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a8a:	61d3      	str	r3, [r2, #28]
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <HAL_I2C_MspInit+0x74>)
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010c00 	.word	0x40010c00

08000aac <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t state = 0, prevstate = 0, forceChange = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000ab6:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 ffff 	bl	8001abe <HAL_CAN_GetRxMessage>
	returnSignal = RxData[0];
 8000ac0:	4b03      	ldr	r3, [pc, #12]	@ (8000ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	4b04      	ldr	r3, [pc, #16]	@ (8000ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000ac6:	701a      	strb	r2, [r3, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000100 	.word	0x20000100
 8000ad4:	200000bc 	.word	0x200000bc
 8000ad8:	2000023c 	.word	0x2000023c

08000adc <SentDatatoAct>:

uint8_t Get_State(int d1, int d2, uint8_t *forceChange, uint8_t state);
uint8_t Get_CounterState(uint8_t state);

void SentDatatoAct()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	switch (state) {
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <SentDatatoAct+0xd0>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	d85e      	bhi.n	8000ba8 <SentDatatoAct+0xcc>
 8000aea:	a201      	add	r2, pc, #4	@ (adr r2, 8000af0 <SentDatatoAct+0x14>)
 8000aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af0:	08000b11 	.word	0x08000b11
 8000af4:	08000b35 	.word	0x08000b35
 8000af8:	08000b59 	.word	0x08000b59
 8000afc:	08000b6b 	.word	0x08000b6b
 8000b00:	08000b7d 	.word	0x08000b7d
 8000b04:	08000ba9 	.word	0x08000ba9
 8000b08:	08000ba9 	.word	0x08000ba9
 8000b0c:	08000b8f 	.word	0x08000b8f
			case 1:
				forceChange = 0;
 8000b10:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <SentDatatoAct+0xd4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
				prevstate = state;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <SentDatatoAct+0xd0>)
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <SentDatatoAct+0xd8>)
 8000b1c:	701a      	strb	r2, [r3, #0]
				while (returnSignal != 1) {
 8000b1e:	e004      	b.n	8000b2a <SentDatatoAct+0x4e>
					CAN_Transmit(&hcan, &TxHeader, LEFT);
 8000b20:	4a25      	ldr	r2, [pc, #148]	@ (8000bb8 <SentDatatoAct+0xdc>)
 8000b22:	4926      	ldr	r1, [pc, #152]	@ (8000bbc <SentDatatoAct+0xe0>)
 8000b24:	4826      	ldr	r0, [pc, #152]	@ (8000bc0 <SentDatatoAct+0xe4>)
 8000b26:	f7ff fb63 	bl	80001f0 <CAN_Transmit>
				while (returnSignal != 1) {
 8000b2a:	4b26      	ldr	r3, [pc, #152]	@ (8000bc4 <SentDatatoAct+0xe8>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d1f6      	bne.n	8000b20 <SentDatatoAct+0x44>
				}
				break;
 8000b32:	e039      	b.n	8000ba8 <SentDatatoAct+0xcc>
			case 2:
				forceChange = 0;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <SentDatatoAct+0xd4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
				prevstate = state;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <SentDatatoAct+0xd0>)
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <SentDatatoAct+0xd8>)
 8000b40:	701a      	strb	r2, [r3, #0]
				while (returnSignal != 2) {
 8000b42:	e004      	b.n	8000b4e <SentDatatoAct+0x72>
					CAN_Transmit(&hcan, &TxHeader, RIGHT);
 8000b44:	4a20      	ldr	r2, [pc, #128]	@ (8000bc8 <SentDatatoAct+0xec>)
 8000b46:	491d      	ldr	r1, [pc, #116]	@ (8000bbc <SentDatatoAct+0xe0>)
 8000b48:	481d      	ldr	r0, [pc, #116]	@ (8000bc0 <SentDatatoAct+0xe4>)
 8000b4a:	f7ff fb51 	bl	80001f0 <CAN_Transmit>
				while (returnSignal != 2) {
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <SentDatatoAct+0xe8>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d1f6      	bne.n	8000b44 <SentDatatoAct+0x68>
				}
				break;
 8000b56:	e027      	b.n	8000ba8 <SentDatatoAct+0xcc>
			case 3:
				forceChange = 0;
 8000b58:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <SentDatatoAct+0xd4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
				CAN_Transmit(&hcan, &TxHeader, FORWARD);
 8000b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bcc <SentDatatoAct+0xf0>)
 8000b60:	4916      	ldr	r1, [pc, #88]	@ (8000bbc <SentDatatoAct+0xe0>)
 8000b62:	4817      	ldr	r0, [pc, #92]	@ (8000bc0 <SentDatatoAct+0xe4>)
 8000b64:	f7ff fb44 	bl	80001f0 <CAN_Transmit>
				break;
 8000b68:	e01e      	b.n	8000ba8 <SentDatatoAct+0xcc>
			case 4:
				CAN_Transmit(&hcan, &TxHeader, BACKWARD_LEFT);
 8000b6a:	4a19      	ldr	r2, [pc, #100]	@ (8000bd0 <SentDatatoAct+0xf4>)
 8000b6c:	4913      	ldr	r1, [pc, #76]	@ (8000bbc <SentDatatoAct+0xe0>)
 8000b6e:	4814      	ldr	r0, [pc, #80]	@ (8000bc0 <SentDatatoAct+0xe4>)
 8000b70:	f7ff fb3e 	bl	80001f0 <CAN_Transmit>
				forceChange = 4;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <SentDatatoAct+0xd4>)
 8000b76:	2204      	movs	r2, #4
 8000b78:	701a      	strb	r2, [r3, #0]
				break;
 8000b7a:	e015      	b.n	8000ba8 <SentDatatoAct+0xcc>
			case 5:
				CAN_Transmit(&hcan, &TxHeader, BACKWARD_RIGHT);
 8000b7c:	4a15      	ldr	r2, [pc, #84]	@ (8000bd4 <SentDatatoAct+0xf8>)
 8000b7e:	490f      	ldr	r1, [pc, #60]	@ (8000bbc <SentDatatoAct+0xe0>)
 8000b80:	480f      	ldr	r0, [pc, #60]	@ (8000bc0 <SentDatatoAct+0xe4>)
 8000b82:	f7ff fb35 	bl	80001f0 <CAN_Transmit>
				forceChange = 5;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <SentDatatoAct+0xd4>)
 8000b88:	2205      	movs	r2, #5
 8000b8a:	701a      	strb	r2, [r3, #0]
				break;
 8000b8c:	e00c      	b.n	8000ba8 <SentDatatoAct+0xcc>
			case 8:
				sprintf(lcd, "\n\rSensor 1\n\r  D1: %dmm\n\n\rSensor 2\n\r  D2: %dmm", sensor1.distance, sensor2.distance);
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <SentDatatoAct+0xfc>)
 8000b90:	691a      	ldr	r2, [r3, #16]
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <SentDatatoAct+0x100>)
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	4912      	ldr	r1, [pc, #72]	@ (8000be0 <SentDatatoAct+0x104>)
 8000b98:	4812      	ldr	r0, [pc, #72]	@ (8000be4 <SentDatatoAct+0x108>)
 8000b9a:	f003 ffb3 	bl	8004b04 <siprintf>
				Print(lcd, 200);
 8000b9e:	21c8      	movs	r1, #200	@ 0xc8
 8000ba0:	4810      	ldr	r0, [pc, #64]	@ (8000be4 <SentDatatoAct+0x108>)
 8000ba2:	f000 fadb 	bl	800115c <Print>
				break;
 8000ba6:	bf00      	nop
			}
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000023d 	.word	0x2000023d
 8000bb0:	2000023f 	.word	0x2000023f
 8000bb4:	2000023e 	.word	0x2000023e
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	200000a0 	.word	0x200000a0
 8000bc0:	20000134 	.word	0x20000134
 8000bc4:	2000023c 	.word	0x2000023c
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000010 	.word	0x20000010
 8000bd0:	20000018 	.word	0x20000018
 8000bd4:	20000020 	.word	0x20000020
 8000bd8:	200001b0 	.word	0x200001b0
 8000bdc:	200001c4 	.word	0x200001c4
 8000be0:	08005604 	.word	0x08005604
 8000be4:	200001d8 	.word	0x200001d8

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bee:	f000 fc09 	bl	8001404 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bf2:	f000 f87f 	bl	8000cf4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bf6:	f7ff fe7f 	bl	80008f8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000bfa:	f7ff feeb 	bl	80009d4 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000bfe:	f000 fa37 	bl	8001070 <MX_USART1_UART_Init>
	MX_CAN_Init();
 8000c02:	f7ff fded 	bl	80007e0 <MX_CAN_Init>
	MX_TIM3_Init();
 8000c06:	f000 f9bf 	bl	8000f88 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	TOF_InitStruct(&sensor1, &hi2c1, 0x22, XSHUT1_GPIO_Port, XSHUT1_Pin);
 8000c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc8 <main+0xe0>)
 8000c12:	2222      	movs	r2, #34	@ 0x22
 8000c14:	492d      	ldr	r1, [pc, #180]	@ (8000ccc <main+0xe4>)
 8000c16:	482e      	ldr	r0, [pc, #184]	@ (8000cd0 <main+0xe8>)
 8000c18:	f7ff fafe 	bl	8000218 <TOF_InitStruct>
	TOF_InitStruct(&sensor2, &hi2c1, 0x26, XSHUT2_GPIO_Port, XSHUT2_Pin);
 8000c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd4 <main+0xec>)
 8000c24:	2226      	movs	r2, #38	@ 0x26
 8000c26:	4929      	ldr	r1, [pc, #164]	@ (8000ccc <main+0xe4>)
 8000c28:	482b      	ldr	r0, [pc, #172]	@ (8000cd8 <main+0xf0>)
 8000c2a:	f7ff faf5 	bl	8000218 <TOF_InitStruct>
	int status = VL53L1_BootDualSensors(&sensor1, &sensor2);
 8000c2e:	492a      	ldr	r1, [pc, #168]	@ (8000cd8 <main+0xf0>)
 8000c30:	4827      	ldr	r0, [pc, #156]	@ (8000cd0 <main+0xe8>)
 8000c32:	f7ff fd89 	bl	8000748 <VL53L1_BootDualSensors>
 8000c36:	4603      	mov	r3, r0
 8000c38:	607b      	str	r3, [r7, #4]
	if (VL53L1_BootDualSensors(&sensor1, &sensor2) != 0) {
 8000c3a:	4927      	ldr	r1, [pc, #156]	@ (8000cd8 <main+0xf0>)
 8000c3c:	4824      	ldr	r0, [pc, #144]	@ (8000cd0 <main+0xe8>)
 8000c3e:	f7ff fd83 	bl	8000748 <VL53L1_BootDualSensors>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <main+0x66>
		VL53L1_Error_Hanlder(status);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fd9f 	bl	800078c <VL53L1_Error_Hanlder>
	}
	CAN_FilterInit_SingleFF0(&hcan, &canfilterconfig, ACTUATOR_ADDR);
 8000c4e:	22a2      	movs	r2, #162	@ 0xa2
 8000c50:	4922      	ldr	r1, [pc, #136]	@ (8000cdc <main+0xf4>)
 8000c52:	4823      	ldr	r0, [pc, #140]	@ (8000ce0 <main+0xf8>)
 8000c54:	f7ff fa9c 	bl	8000190 <CAN_FilterInit_SingleFF0>
	CAN_ComInit_Std(&TxHeader, &hcan, SENSOR_ADDR, 2);
 8000c58:	2302      	movs	r3, #2
 8000c5a:	2212      	movs	r2, #18
 8000c5c:	4920      	ldr	r1, [pc, #128]	@ (8000ce0 <main+0xf8>)
 8000c5e:	4821      	ldr	r0, [pc, #132]	@ (8000ce4 <main+0xfc>)
 8000c60:	f7ff fa7c 	bl	800015c <CAN_ComInit_Std>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (forceChange != 0) {
 8000c64:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <main+0x100>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00e      	beq.n	8000c8a <main+0xa2>
			if (forceChange == 5) {
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <main+0x100>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	d103      	bne.n	8000c7c <main+0x94>
				state = 1;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <main+0x104>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e002      	b.n	8000c82 <main+0x9a>
			} else {
				state = 2;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <main+0x104>)
 8000c7e:	2202      	movs	r2, #2
 8000c80:	701a      	strb	r2, [r3, #0]
			}
			forceChange = 0;
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <main+0x100>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	e01b      	b.n	8000cc2 <main+0xda>
		} else {
			VL53L1_GetDistance(&sensor1);
 8000c8a:	4811      	ldr	r0, [pc, #68]	@ (8000cd0 <main+0xe8>)
 8000c8c:	f7ff fd94 	bl	80007b8 <VL53L1_GetDistance>
			VL53L1_GetDistance(&sensor2);
 8000c90:	4811      	ldr	r0, [pc, #68]	@ (8000cd8 <main+0xf0>)
 8000c92:	f7ff fd91 	bl	80007b8 <VL53L1_GetDistance>
			if (sensor2.distance >= 55) {
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <main+0xf0>)
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	2b36      	cmp	r3, #54	@ 0x36
 8000c9c:	dd04      	ble.n	8000ca8 <main+0xc0>
				sensor2.distance += 50;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <main+0xf0>)
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	3332      	adds	r3, #50	@ 0x32
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <main+0xf0>)
 8000ca6:	6113      	str	r3, [r2, #16]
			}

			state = Get_State(sensor1.distance, sensor2.distance, 0, prevstate);
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <main+0xe8>)
 8000caa:	6918      	ldr	r0, [r3, #16]
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <main+0xf0>)
 8000cae:	6919      	ldr	r1, [r3, #16]
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <main+0x108>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f000 f862 	bl	8000d7e <Get_State>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <main+0x104>)
 8000cc0:	701a      	strb	r2, [r3, #0]
		}
		SentDatatoAct();
 8000cc2:	f7ff ff0b 	bl	8000adc <SentDatatoAct>
		if (forceChange != 0) {
 8000cc6:	e7cd      	b.n	8000c64 <main+0x7c>
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	2000015c 	.word	0x2000015c
 8000cd0:	200001b0 	.word	0x200001b0
 8000cd4:	40010c00 	.word	0x40010c00
 8000cd8:	200001c4 	.word	0x200001c4
 8000cdc:	200000d8 	.word	0x200000d8
 8000ce0:	20000134 	.word	0x20000134
 8000ce4:	200000a0 	.word	0x200000a0
 8000ce8:	2000023f 	.word	0x2000023f
 8000cec:	2000023d 	.word	0x2000023d
 8000cf0:	2000023e 	.word	0x2000023e

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b090      	sub	sp, #64	@ 0x40
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	2228      	movs	r2, #40	@ 0x28
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 ff1e 	bl	8004b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d24:	2301      	movs	r3, #1
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d32:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d38:	f107 0318 	add.w	r3, r7, #24
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 fd05 	bl	800374c <HAL_RCC_OscConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d48:	f000 f869 	bl	8000e1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d50:	2302      	movs	r3, #2
 8000d52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2102      	movs	r1, #2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 ff72 	bl	8003c50 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d72:	f000 f854 	bl	8000e1e <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3740      	adds	r7, #64	@ 0x40
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <Get_State>:

/* USER CODE BEGIN 4 */
uint8_t Get_State(int distance1, int distance2, uint8_t *forceChange, uint8_t state)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	70fb      	strb	r3, [r7, #3]
	if (*forceChange == 0) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d11d      	bne.n	8000dd0 <Get_State+0x52>
		if (distance2 < distance1) {
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	da0a      	bge.n	8000db2 <Get_State+0x34>
			if (distance2 <= 100)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2b64      	cmp	r3, #100	@ 0x64
 8000da0:	dc01      	bgt.n	8000da6 <Get_State+0x28>
				return 5;
 8000da2:	2305      	movs	r3, #5
 8000da4:	e022      	b.n	8000dec <Get_State+0x6e>
			else if (distance2 <= 900)
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000dac:	dc1d      	bgt.n	8000dea <Get_State+0x6c>
				return 1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e01c      	b.n	8000dec <Get_State+0x6e>
		}
		else if (distance1 < distance2) {
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	da17      	bge.n	8000dea <Get_State+0x6c>
			if (distance1 <= 100)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2b64      	cmp	r3, #100	@ 0x64
 8000dbe:	dc01      	bgt.n	8000dc4 <Get_State+0x46>
				return 5;
 8000dc0:	2305      	movs	r3, #5
 8000dc2:	e013      	b.n	8000dec <Get_State+0x6e>
			else if (distance1 <= 900)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000dca:	dc0e      	bgt.n	8000dea <Get_State+0x6c>
				return 2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e00d      	b.n	8000dec <Get_State+0x6e>
		}

	}
	else if (*forceChange == 1) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d108      	bne.n	8000dea <Get_State+0x6c>
		*forceChange = 0;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
		return Get_CounterState(state);
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f807 	bl	8000df4 <Get_CounterState>
 8000de6:	4603      	mov	r3, r0
 8000de8:	e000      	b.n	8000dec <Get_State+0x6e>
	}
	return 3;
 8000dea:	2303      	movs	r3, #3
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <Get_CounterState>:

uint8_t Get_CounterState(uint8_t state)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	if (state == 2) {
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d101      	bne.n	8000e08 <Get_CounterState+0x14>
		return 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e005      	b.n	8000e14 <Get_CounterState+0x20>
	} else if (state == 1) {
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d101      	bne.n	8000e12 <Get_CounterState+0x1e>
		return 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e000      	b.n	8000e14 <Get_CounterState+0x20>
	} else {
		return 1;
 8000e12:	2301      	movs	r3, #1
	}
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e22:	b672      	cpsid	i
}
 8000e24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e26:	bf00      	nop
 8000e28:	e7fd      	b.n	8000e26 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_MspInit+0x60>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_MspInit+0x60>)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 fad6 	bl	8001490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000eee:	f000 ff2c 	bl	8001d4a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000134 	.word	0x20000134

08000efc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <TIM3_IRQHandler+0x10>)
 8000f02:	f003 f882 	bl	800400a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000244 	.word	0x20000244

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	@ (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f003 fe08 	bl	8004b54 <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20005000 	.word	0x20005000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	20000240 	.word	0x20000240
 8000f78:	20000520 	.word	0x20000520

08000f7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8001020 <MX_TIM3_Init+0x98>)
 8000fa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fac:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000fb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b16      	ldr	r3, [pc, #88]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fcc:	4813      	ldr	r0, [pc, #76]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fce:	f002 ffcd 	bl	8003f6c <HAL_TIM_Base_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000fd8:	f7ff ff21 	bl	8000e1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fea:	f003 f8fe 	bl	80041ea <HAL_TIM_ConfigClockSource>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ff4:	f7ff ff13 	bl	8000e1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_TIM3_Init+0x94>)
 8001006:	f003 fae9 	bl	80045dc <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001010:	f7ff ff05 	bl	8000e1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000244 	.word	0x20000244
 8001020:	40000400 	.word	0x40000400

08001024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <HAL_TIM_Base_MspInit+0x44>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d113      	bne.n	800105e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001036:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <HAL_TIM_Base_MspInit+0x48>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a0c      	ldr	r2, [pc, #48]	@ (800106c <HAL_TIM_Base_MspInit+0x48>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_TIM_Base_MspInit+0x48>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	201d      	movs	r0, #29
 8001054:	f001 f973 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001058:	201d      	movs	r0, #29
 800105a:	f001 f98c 	bl	8002376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40000400 	.word	0x40000400
 800106c:	40021000 	.word	0x40021000

08001070 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <MX_USART1_UART_Init+0x50>)
 8001078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 80010a8:	f003 fb08 	bl	80046bc <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010b2:	f7ff feb4 	bl	8000e1e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000028c 	.word	0x2000028c
 80010c0:	40013800 	.word	0x40013800

080010c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a1c      	ldr	r2, [pc, #112]	@ (8001150 <HAL_UART_MspInit+0x8c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d131      	bne.n	8001148 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <HAL_UART_MspInit+0x90>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001154 <HAL_UART_MspInit+0x90>)
 80010ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_UART_MspInit+0x90>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_UART_MspInit+0x90>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <HAL_UART_MspInit+0x90>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_UART_MspInit+0x90>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001114:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001118:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	480b      	ldr	r0, [pc, #44]	@ (8001158 <HAL_UART_MspInit+0x94>)
 800112a:	f001 f93f 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800112e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	4805      	ldr	r0, [pc, #20]	@ (8001158 <HAL_UART_MspInit+0x94>)
 8001144:	f001 f932 	bl	80023ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013800 	.word	0x40013800
 8001154:	40021000 	.word	0x40021000
 8001158:	40010800 	.word	0x40010800

0800115c <Print>:
  }
}

/* USER CODE BEGIN 1 */
void Print(char *buffer, uint16_t timeout)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 200);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7fe ffef 	bl	800014c <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	23c8      	movs	r3, #200	@ 0xc8
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4803      	ldr	r0, [pc, #12]	@ (8001184 <Print+0x28>)
 8001178:	f003 faf0 	bl	800475c <HAL_UART_Transmit>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000028c 	.word	0x2000028c

08001188 <_GetTof>:
extern VL53L1X* registered_sensors[];
extern size_t registered_sensors_cnt;
uint8_t _I2CBuffer[256];

VL53L1X* _GetTof(uint16_t dev)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
	for (size_t i = 0; i < registered_sensors_cnt; i++)
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	e016      	b.n	80011c6 <_GetTof+0x3e>
		if (registered_sensors[i] != NULL && registered_sensors[i]->id == dev)
 8001198:	4a10      	ldr	r2, [pc, #64]	@ (80011dc <_GetTof+0x54>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00d      	beq.n	80011c0 <_GetTof+0x38>
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <_GetTof+0x54>)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	7b9b      	ldrb	r3, [r3, #14]
 80011ae:	461a      	mov	r2, r3
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d104      	bne.n	80011c0 <_GetTof+0x38>
		{
			return registered_sensors[i];
 80011b6:	4a09      	ldr	r2, [pc, #36]	@ (80011dc <_GetTof+0x54>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	e008      	b.n	80011d2 <_GetTof+0x4a>
	for (size_t i = 0; i < registered_sensors_cnt; i++)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <_GetTof+0x58>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d3e3      	bcc.n	8001198 <_GetTof+0x10>
		}

	return NULL;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000108 	.word	0x20000108
 80011e0:	08005634 	.word	0x08005634

080011e4 <_I2CWrite>:

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	4603      	mov	r3, r0
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	81fb      	strh	r3, [r7, #14]
	VL53L1X* tof = _GetTof(dev);
 80011f2:	89fb      	ldrh	r3, [r7, #14]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ffc7 	bl	8001188 <_GetTof>
 80011fa:	6178      	str	r0, [r7, #20]
	if (tof == NULL)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <_I2CWrite+0x22>
		return 1;
 8001202:	2301      	movs	r3, #1
 8001204:	e00d      	b.n	8001222 <_I2CWrite+0x3e>

	return (int) HAL_I2C_Master_Transmit(tof->hi2c, tof->address << 1, pdata, count, 100);
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	791b      	ldrb	r3, [r3, #4]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	b299      	uxth	r1, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	b29b      	uxth	r3, r3
 8001216:	2264      	movs	r2, #100	@ 0x64
 8001218:	9200      	str	r2, [sp, #0]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f001 fba6 	bl	800296c <HAL_I2C_Master_Transmit>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 800122a:	b580      	push	{r7, lr}
 800122c:	b088      	sub	sp, #32
 800122e:	af02      	add	r7, sp, #8
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	81fb      	strh	r3, [r7, #14]
	VL53L1X* tof = _GetTof(dev);
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffa4 	bl	8001188 <_GetTof>
 8001240:	6178      	str	r0, [r7, #20]
	if (tof == NULL)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <_I2CRead+0x22>
		return 1;
 8001248:	2301      	movs	r3, #1
 800124a:	e00d      	b.n	8001268 <_I2CRead+0x3e>

    return (int) HAL_I2C_Master_Receive(tof->hi2c, tof->address << 1, pdata, count, 100);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	791b      	ldrb	r3, [r3, #4]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	b299      	uxth	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	b29b      	uxth	r3, r3
 800125c:	2264      	movs	r2, #100	@ 0x64
 800125e:	9200      	str	r2, [sp, #0]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	f001 fc81 	bl	8002b68 <HAL_I2C_Master_Receive>
 8001266:	4603      	mov	r3, r0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
 800127a:	460b      	mov	r3, r1
 800127c:	80bb      	strh	r3, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	b29b      	uxth	r3, r3
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <VL53L1_WrByte+0x54>)
 8001290:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8001292:	88bb      	ldrh	r3, [r7, #4]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <VL53L1_WrByte+0x54>)
 8001298:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <VL53L1_WrByte+0x54>)
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	2203      	movs	r2, #3
 80012a4:	4907      	ldr	r1, [pc, #28]	@ (80012c4 <VL53L1_WrByte+0x54>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff9c 	bl	80011e4 <_I2CWrite>
 80012ac:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80012b4:	23f3      	movs	r3, #243	@ 0xf3
 80012b6:	73fb      	strb	r3, [r7, #15]
    }
    return Status;}
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200002d4 	.word	0x200002d4

080012c8 <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	603a      	str	r2, [r7, #0]
 80012d2:	80fb      	strh	r3, [r7, #6]
 80012d4:	460b      	mov	r3, r1
 80012d6:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <VL53L1_RdByte+0x6c>)
 80012e6:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <VL53L1_RdByte+0x6c>)
 80012ee:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	2202      	movs	r2, #2
 80012f4:	490f      	ldr	r1, [pc, #60]	@ (8001334 <VL53L1_RdByte+0x6c>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff74 	bl	80011e4 <_I2CWrite>
 80012fc:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001304:	23f3      	movs	r3, #243	@ 0xf3
 8001306:	73fb      	strb	r3, [r7, #15]
        goto done;
 8001308:	e00d      	b.n	8001326 <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(dev, data, 1);
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	2201      	movs	r2, #1
 800130e:	6839      	ldr	r1, [r7, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff8a 	bl	800122a <_I2CRead>
 8001316:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800131e:	23f3      	movs	r3, #243	@ 0xf3
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e000      	b.n	8001326 <VL53L1_RdByte+0x5e>
    }
done:
 8001324:	bf00      	nop

	return Status;
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200002d4 	.word	0x200002d4

08001338 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	603a      	str	r2, [r7, #0]
 8001342:	80fb      	strh	r3, [r7, #6]
 8001344:	460b      	mov	r3, r1
 8001346:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	b29b      	uxth	r3, r3
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <VL53L1_RdWord+0x7c>)
 8001356:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <VL53L1_RdWord+0x7c>)
 800135e:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	2202      	movs	r2, #2
 8001364:	4913      	ldr	r1, [pc, #76]	@ (80013b4 <VL53L1_RdWord+0x7c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff3c 	bl	80011e4 <_I2CWrite>
 800136c:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001374:	23f3      	movs	r3, #243	@ 0xf3
 8001376:	73fb      	strb	r3, [r7, #15]
        goto done;
 8001378:	e016      	b.n	80013a8 <VL53L1_RdWord+0x70>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	2202      	movs	r2, #2
 800137e:	490d      	ldr	r1, [pc, #52]	@ (80013b4 <VL53L1_RdWord+0x7c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff52 	bl	800122a <_I2CRead>
 8001386:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800138e:	23f3      	movs	r3, #243	@ 0xf3
 8001390:	73fb      	strb	r3, [r7, #15]
        goto done;
 8001392:	e009      	b.n	80013a8 <VL53L1_RdWord+0x70>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8001394:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <VL53L1_RdWord+0x7c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b29b      	uxth	r3, r3
 800139c:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <VL53L1_RdWord+0x7c>)
 800139e:	7852      	ldrb	r2, [r2, #1]
 80013a0:	4413      	add	r3, r2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 80013a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200002d4 	.word	0x200002d4

080013b8 <Reset_Handler>:
 80013b8:	f7ff fde0 	bl	8000f7c <SystemInit>
 80013bc:	480b      	ldr	r0, [pc, #44]	@ (80013ec <LoopFillZerobss+0xe>)
 80013be:	490c      	ldr	r1, [pc, #48]	@ (80013f0 <LoopFillZerobss+0x12>)
 80013c0:	4a0c      	ldr	r2, [pc, #48]	@ (80013f4 <LoopFillZerobss+0x16>)
 80013c2:	2300      	movs	r3, #0
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:
 80013c6:	58d4      	ldr	r4, [r2, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:
 80013cc:	18c4      	adds	r4, r0, r3
 80013ce:	428c      	cmp	r4, r1
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
 80013d2:	4a09      	ldr	r2, [pc, #36]	@ (80013f8 <LoopFillZerobss+0x1a>)
 80013d4:	4c09      	ldr	r4, [pc, #36]	@ (80013fc <LoopFillZerobss+0x1e>)
 80013d6:	2300      	movs	r3, #0
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:
 80013de:	42a2      	cmp	r2, r4
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>
 80013e2:	f003 fbbd 	bl	8004b60 <__libc_init_array>
 80013e6:	f7ff fbff 	bl	8000be8 <main>
 80013ea:	4770      	bx	lr
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000084 	.word	0x20000084
 80013f4:	08005704 	.word	0x08005704
 80013f8:	20000084 	.word	0x20000084
 80013fc:	20000520 	.word	0x20000520

08001400 <ADC1_2_IRQHandler>:
 8001400:	e7fe      	b.n	8001400 <ADC1_2_IRQHandler>
	...

08001404 <HAL_Init>:
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
 8001408:	4b08      	ldr	r3, [pc, #32]	@ (800142c <HAL_Init+0x28>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a07      	ldr	r2, [pc, #28]	@ (800142c <HAL_Init+0x28>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	2003      	movs	r0, #3
 8001416:	f000 ff87 	bl	8002328 <HAL_NVIC_SetPriorityGrouping>
 800141a:	200f      	movs	r0, #15
 800141c:	f000 f808 	bl	8001430 <HAL_InitTick>
 8001420:	f7ff fd04 	bl	8000e2c <HAL_MspInit>
 8001424:	2300      	movs	r3, #0
 8001426:	4618      	mov	r0, r3
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_InitTick>:
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_InitTick+0x54>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <HAL_InitTick+0x58>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 ff9f 	bl	8002392 <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_InitTick+0x2e>
 800145a:	2301      	movs	r3, #1
 800145c:	e00e      	b.n	800147c <HAL_InitTick+0x4c>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d80a      	bhi.n	800147a <HAL_InitTick+0x4a>
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f000 ff67 	bl	800233e <HAL_NVIC_SetPriority>
 8001470:	4a06      	ldr	r2, [pc, #24]	@ (800148c <HAL_InitTick+0x5c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x4c>
 800147a:	2301      	movs	r3, #1
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000028 	.word	0x20000028
 8001488:	20000030 	.word	0x20000030
 800148c:	2000002c 	.word	0x2000002c

08001490 <HAL_IncTick>:
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_IncTick+0x1c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_IncTick+0x20>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a03      	ldr	r2, [pc, #12]	@ (80014b0 <HAL_IncTick+0x20>)
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	20000030 	.word	0x20000030
 80014b0:	200003d4 	.word	0x200003d4

080014b4 <HAL_GetTick>:
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4b02      	ldr	r3, [pc, #8]	@ (80014c4 <HAL_GetTick+0x10>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	200003d4 	.word	0x200003d4

080014c8 <HAL_Delay>:
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	f7ff fff0 	bl	80014b4 <HAL_GetTick>
 80014d4:	60b8      	str	r0, [r7, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e0:	d005      	beq.n	80014ee <HAL_Delay+0x26>
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_Delay+0x44>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	bf00      	nop
 80014f0:	f7ff ffe0 	bl	80014b4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d8f7      	bhi.n	80014f0 <HAL_Delay+0x28>
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000030 	.word	0x20000030

08001510 <HAL_CAN_Init>:
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_CAN_Init+0x12>
 800151e:	2301      	movs	r3, #1
 8001520:	e0ed      	b.n	80016fe <HAL_CAN_Init+0x1ee>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_CAN_Init+0x24>
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff f98e 	bl	8000850 <HAL_CAN_MspInit>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	f7ff ffb6 	bl	80014b4 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	e012      	b.n	8001572 <HAL_CAN_Init+0x62>
 800154c:	f7ff ffb2 	bl	80014b4 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b0a      	cmp	r3, #10
 8001558:	d90b      	bls.n	8001572 <HAL_CAN_Init+0x62>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2205      	movs	r2, #5
 800156a:	f883 2020 	strb.w	r2, [r3, #32]
 800156e:	2301      	movs	r3, #1
 8001570:	e0c5      	b.n	80016fe <HAL_CAN_Init+0x1ee>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0e5      	beq.n	800154c <HAL_CAN_Init+0x3c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0202 	bic.w	r2, r2, #2
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	f7ff ff90 	bl	80014b4 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	e012      	b.n	80015be <HAL_CAN_Init+0xae>
 8001598:	f7ff ff8c 	bl	80014b4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b0a      	cmp	r3, #10
 80015a4:	d90b      	bls.n	80015be <HAL_CAN_Init+0xae>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2205      	movs	r2, #5
 80015b6:	f883 2020 	strb.w	r2, [r3, #32]
 80015ba:	2301      	movs	r3, #1
 80015bc:	e09f      	b.n	80016fe <HAL_CAN_Init+0x1ee>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e5      	bne.n	8001598 <HAL_CAN_Init+0x88>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7e1b      	ldrb	r3, [r3, #24]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d108      	bne.n	80015e6 <HAL_CAN_Init+0xd6>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e007      	b.n	80015f6 <HAL_CAN_Init+0xe6>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7e5b      	ldrb	r3, [r3, #25]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d108      	bne.n	8001610 <HAL_CAN_Init+0x100>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e007      	b.n	8001620 <HAL_CAN_Init+0x110>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7e9b      	ldrb	r3, [r3, #26]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_CAN_Init+0x12a>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0220 	orr.w	r2, r2, #32
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e007      	b.n	800164a <HAL_CAN_Init+0x13a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0220 	bic.w	r2, r2, #32
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7edb      	ldrb	r3, [r3, #27]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_CAN_Init+0x154>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0210 	bic.w	r2, r2, #16
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e007      	b.n	8001674 <HAL_CAN_Init+0x164>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0210 	orr.w	r2, r2, #16
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7f1b      	ldrb	r3, [r3, #28]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d108      	bne.n	800168e <HAL_CAN_Init+0x17e>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0208 	orr.w	r2, r2, #8
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e007      	b.n	800169e <HAL_CAN_Init+0x18e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0208 	bic.w	r2, r2, #8
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7f5b      	ldrb	r3, [r3, #29]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d108      	bne.n	80016b8 <HAL_CAN_Init+0x1a8>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0204 	orr.w	r2, r2, #4
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e007      	b.n	80016c8 <HAL_CAN_Init+0x1b8>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0204 	bic.w	r2, r2, #4
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	ea42 0103 	orr.w	r1, r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	1e5a      	subs	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	61da      	str	r2, [r3, #28]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2020 	strb.w	r2, [r3, #32]
 80016fc:	2300      	movs	r3, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_CAN_ConfigFilter>:
 8001706:	b480      	push	{r7}
 8001708:	b087      	sub	sp, #28
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171c:	74fb      	strb	r3, [r7, #19]
 800171e:	7cfb      	ldrb	r3, [r7, #19]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d003      	beq.n	800172c <HAL_CAN_ConfigFilter+0x26>
 8001724:	7cfb      	ldrb	r3, [r7, #19]
 8001726:	2b02      	cmp	r3, #2
 8001728:	f040 80aa 	bne.w	8001880 <HAL_CAN_ConfigFilter+0x17a>
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001732:	f043 0201 	orr.w	r2, r3, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	2201      	movs	r2, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d123      	bne.n	80017ae <HAL_CAN_ConfigFilter+0xa8>
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	401a      	ands	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0419      	lsls	r1, r3, #16
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	b29b      	uxth	r3, r3
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	6952      	ldr	r2, [r2, #20]
 8001788:	4319      	orrs	r1, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3248      	adds	r2, #72	@ 0x48
 800178e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	0419      	lsls	r1, r3, #16
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	b29a      	uxth	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	6979      	ldr	r1, [r7, #20]
 80017a6:	3348      	adds	r3, #72	@ 0x48
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d122      	bne.n	80017fc <HAL_CAN_ConfigFilter+0xf6>
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	431a      	orrs	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0419      	lsls	r1, r3, #16
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	6952      	ldr	r2, [r2, #20]
 80017d6:	4319      	orrs	r1, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3248      	adds	r2, #72	@ 0x48
 80017dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	0419      	lsls	r1, r3, #16
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	6979      	ldr	r1, [r7, #20]
 80017f4:	3348      	adds	r3, #72	@ 0x48
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d109      	bne.n	8001818 <HAL_CAN_ConfigFilter+0x112>
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001816:	e007      	b.n	8001828 <HAL_CAN_ConfigFilter+0x122>
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	431a      	orrs	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <HAL_CAN_ConfigFilter+0x13e>
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001842:	e007      	b.n	8001854 <HAL_CAN_ConfigFilter+0x14e>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d107      	bne.n	800186c <HAL_CAN_ConfigFilter+0x166>
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	431a      	orrs	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001872:	f023 0201 	bic.w	r2, r3, #1
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 800187c:	2300      	movs	r3, #0
 800187e:	e006      	b.n	800188e <HAL_CAN_ConfigFilter+0x188>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24
 800188c:	2301      	movs	r3, #1
 800188e:	4618      	mov	r0, r3
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_CAN_Start>:
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d12e      	bne.n	800190a <HAL_CAN_Start+0x72>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	f7ff fdf6 	bl	80014b4 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	e012      	b.n	80018f2 <HAL_CAN_Start+0x5a>
 80018cc:	f7ff fdf2 	bl	80014b4 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b0a      	cmp	r3, #10
 80018d8:	d90b      	bls.n	80018f2 <HAL_CAN_Start+0x5a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2205      	movs	r2, #5
 80018ea:	f883 2020 	strb.w	r2, [r3, #32]
 80018ee:	2301      	movs	r3, #1
 80018f0:	e012      	b.n	8001918 <HAL_CAN_Start+0x80>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1e5      	bne.n	80018cc <HAL_CAN_Start+0x34>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24
 8001906:	2300      	movs	r3, #0
 8001908:	e006      	b.n	8001918 <HAL_CAN_Start+0x80>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24
 8001916:	2301      	movs	r3, #1
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_CAN_AddTxMessage>:
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001934:	77fb      	strb	r3, [r7, #31]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	7ffb      	ldrb	r3, [r7, #31]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d003      	beq.n	800194c <HAL_CAN_AddTxMessage+0x2c>
 8001944:	7ffb      	ldrb	r3, [r7, #31]
 8001946:	2b02      	cmp	r3, #2
 8001948:	f040 80ad 	bne.w	8001aa6 <HAL_CAN_AddTxMessage+0x186>
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10a      	bne.n	800196c <HAL_CAN_AddTxMessage+0x4c>
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <HAL_CAN_AddTxMessage+0x4c>
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8095 	beq.w	8001a96 <HAL_CAN_AddTxMessage+0x176>
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	0e1b      	lsrs	r3, r3, #24
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	2201      	movs	r2, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10d      	bne.n	80019a4 <HAL_CAN_AddTxMessage+0x84>
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	055a      	lsls	r2, r3, #21
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	68f9      	ldr	r1, [r7, #12]
 8001994:	6809      	ldr	r1, [r1, #0]
 8001996:	431a      	orrs	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3318      	adds	r3, #24
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	440b      	add	r3, r1
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e00f      	b.n	80019c4 <HAL_CAN_AddTxMessage+0xa4>
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	00da      	lsls	r2, r3, #3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	6809      	ldr	r1, [r1, #0]
 80019b8:	431a      	orrs	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3318      	adds	r3, #24
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	440b      	add	r3, r1
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3318      	adds	r3, #24
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	440b      	add	r3, r1
 80019d4:	3304      	adds	r3, #4
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	7d1b      	ldrb	r3, [r3, #20]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d111      	bne.n	8001a04 <HAL_CAN_AddTxMessage+0xe4>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3318      	adds	r3, #24
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4413      	add	r3, r2
 80019ec:	3304      	adds	r3, #4
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	6811      	ldr	r1, [r2, #0]
 80019f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3318      	adds	r3, #24
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	440b      	add	r3, r1
 8001a00:	3304      	adds	r3, #4
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3307      	adds	r3, #7
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	061a      	lsls	r2, r3, #24
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3306      	adds	r3, #6
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	041b      	lsls	r3, r3, #16
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3305      	adds	r3, #5
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	3204      	adds	r2, #4
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	4610      	mov	r0, r2
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	6811      	ldr	r1, [r2, #0]
 8001a2c:	ea43 0200 	orr.w	r2, r3, r0
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	440b      	add	r3, r1
 8001a36:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3303      	adds	r3, #3
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	061a      	lsls	r2, r3, #24
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3302      	adds	r3, #2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	041b      	lsls	r3, r3, #16
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3301      	adds	r3, #1
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	4313      	orrs	r3, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	7812      	ldrb	r2, [r2, #0]
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	6811      	ldr	r1, [r2, #0]
 8001a62:	ea43 0200 	orr.w	r2, r3, r0
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3318      	adds	r3, #24
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	4413      	add	r3, r2
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	6811      	ldr	r1, [r2, #0]
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3318      	adds	r3, #24
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	440b      	add	r3, r1
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	2300      	movs	r3, #0
 8001a94:	e00e      	b.n	8001ab4 <HAL_CAN_AddTxMessage+0x194>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e006      	b.n	8001ab4 <HAL_CAN_AddTxMessage+0x194>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3724      	adds	r7, #36	@ 0x24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_CAN_GetRxMessage>:
 8001abe:	b480      	push	{r7}
 8001ac0:	b087      	sub	sp, #28
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad2:	75fb      	strb	r3, [r7, #23]
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d003      	beq.n	8001ae2 <HAL_CAN_GetRxMessage+0x24>
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	f040 8103 	bne.w	8001ce8 <HAL_CAN_GetRxMessage+0x22a>
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10e      	bne.n	8001b06 <HAL_CAN_GetRxMessage+0x48>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d116      	bne.n	8001b24 <HAL_CAN_GetRxMessage+0x66>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0f7      	b.n	8001cf6 <HAL_CAN_GetRxMessage+0x238>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d107      	bne.n	8001b24 <HAL_CAN_GetRxMessage+0x66>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0e8      	b.n	8001cf6 <HAL_CAN_GetRxMessage+0x238>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	331b      	adds	r3, #27
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	4413      	add	r3, r2
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0204 	and.w	r2, r3, #4
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_CAN_GetRxMessage+0x9e>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	331b      	adds	r3, #27
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4413      	add	r3, r2
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0d5b      	lsrs	r3, r3, #21
 8001b52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	e00b      	b.n	8001b74 <HAL_CAN_GetRxMessage+0xb6>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	331b      	adds	r3, #27
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	08db      	lsrs	r3, r3, #3
 8001b6c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	331b      	adds	r3, #27
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0202 	and.w	r2, r3, #2
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	331b      	adds	r3, #27
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	3304      	adds	r3, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_CAN_GetRxMessage+0xec>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	611a      	str	r2, [r3, #16]
 8001ba8:	e00b      	b.n	8001bc2 <HAL_CAN_GetRxMessage+0x104>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	331b      	adds	r3, #27
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 020f 	and.w	r2, r3, #15
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	331b      	adds	r3, #27
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	4413      	add	r3, r2
 8001bce:	3304      	adds	r3, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	619a      	str	r2, [r3, #24]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	331b      	adds	r3, #27
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	3304      	adds	r3, #4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	615a      	str	r2, [r3, #20]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0a1a      	lsrs	r2, r3, #8
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	0c1a      	lsrs	r2, r3, #16
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	3302      	adds	r3, #2
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0e1a      	lsrs	r2, r3, #24
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	3303      	adds	r3, #3
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0a1a      	lsrs	r2, r3, #8
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	3305      	adds	r3, #5
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0c1a      	lsrs	r2, r3, #16
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3306      	adds	r3, #6
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0e1a      	lsrs	r2, r3, #24
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	3307      	adds	r3, #7
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d108      	bne.n	8001cd4 <HAL_CAN_GetRxMessage+0x216>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0220 	orr.w	r2, r2, #32
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	e007      	b.n	8001ce4 <HAL_CAN_GetRxMessage+0x226>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0220 	orr.w	r2, r2, #32
 8001ce2:	611a      	str	r2, [r3, #16]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e006      	b.n	8001cf6 <HAL_CAN_GetRxMessage+0x238>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <HAL_CAN_ActivateNotification>:
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d002      	beq.n	8001d1e <HAL_CAN_ActivateNotification+0x1e>
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d109      	bne.n	8001d32 <HAL_CAN_ActivateNotification+0x32>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6959      	ldr	r1, [r3, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	615a      	str	r2, [r3, #20]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e006      	b.n	8001d40 <HAL_CAN_ActivateNotification+0x40>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d3e:	2301      	movs	r3, #1
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <HAL_CAN_IRQHandler>:
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b08a      	sub	sp, #40	@ 0x28
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	623b      	str	r3, [r7, #32]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d07c      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x140>
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d023      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x98>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x6a>
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f983 	bl	80020b8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001db2:	e016      	b.n	8001de2 <HAL_CAN_IRQHandler+0x98>
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d004      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x7e>
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc6:	e00c      	b.n	8001de2 <HAL_CAN_IRQHandler+0x98>
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <HAL_CAN_IRQHandler+0x92>
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dda:	e002      	b.n	8001de2 <HAL_CAN_IRQHandler+0x98>
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f986 	bl	80020ee <HAL_CAN_TxMailbox0AbortCallback>
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d024      	beq.n	8001e36 <HAL_CAN_IRQHandler+0xec>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_CAN_IRQHandler+0xbe>
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f962 	bl	80020ca <HAL_CAN_TxMailbox1CompleteCallback>
 8001e06:	e016      	b.n	8001e36 <HAL_CAN_IRQHandler+0xec>
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <HAL_CAN_IRQHandler+0xd2>
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e1a:	e00c      	b.n	8001e36 <HAL_CAN_IRQHandler+0xec>
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <HAL_CAN_IRQHandler+0xe6>
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e2e:	e002      	b.n	8001e36 <HAL_CAN_IRQHandler+0xec>
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f965 	bl	8002100 <HAL_CAN_TxMailbox1AbortCallback>
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d024      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x140>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x112>
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f941 	bl	80020dc <HAL_CAN_TxMailbox2CompleteCallback>
 8001e5a:	e016      	b.n	8001e8a <HAL_CAN_IRQHandler+0x140>
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x126>
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e6e:	e00c      	b.n	8001e8a <HAL_CAN_IRQHandler+0x140>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x13a>
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e82:	e002      	b.n	8001e8a <HAL_CAN_IRQHandler+0x140>
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f944 	bl	8002112 <HAL_CAN_TxMailbox2AbortCallback>
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00c      	beq.n	8001eae <HAL_CAN_IRQHandler+0x164>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <HAL_CAN_IRQHandler+0x164>
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2210      	movs	r2, #16
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x186>
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x186>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f92a 	bl	8002124 <HAL_CAN_RxFifo0FullCallback>
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_CAN_IRQHandler+0x1a4>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_CAN_IRQHandler+0x1a4>
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7fe fddf 	bl	8000aac <HAL_CAN_RxFifo0MsgPendingCallback>
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00c      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x1c8>
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x1c8>
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2210      	movs	r2, #16
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x1ea>
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x1ea>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	611a      	str	r2, [r3, #16]
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f90a 	bl	8002148 <HAL_CAN_RxFifo1FullCallback>
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x208>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x208>
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8f2 	bl	8002136 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00b      	beq.n	8001f74 <HAL_CAN_IRQHandler+0x22a>
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <HAL_CAN_IRQHandler+0x22a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8f3 	bl	800215a <HAL_CAN_SleepCallback>
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x24c>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x24c>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8eb 	bl	800216c <HAL_CAN_WakeUpFromRxMsgCallback>
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d07b      	beq.n	8002098 <HAL_CAN_IRQHandler+0x34e>
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d072      	beq.n	8002090 <HAL_CAN_IRQHandler+0x346>
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x27c>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x27c>
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x298>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x298>
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x2b4>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x2b4>
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002004:	2b00      	cmp	r3, #0
 8002006:	d043      	beq.n	8002090 <HAL_CAN_IRQHandler+0x346>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800200e:	2b00      	cmp	r3, #0
 8002010:	d03e      	beq.n	8002090 <HAL_CAN_IRQHandler+0x346>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002018:	2b60      	cmp	r3, #96	@ 0x60
 800201a:	d02b      	beq.n	8002074 <HAL_CAN_IRQHandler+0x32a>
 800201c:	2b60      	cmp	r3, #96	@ 0x60
 800201e:	d82e      	bhi.n	800207e <HAL_CAN_IRQHandler+0x334>
 8002020:	2b50      	cmp	r3, #80	@ 0x50
 8002022:	d022      	beq.n	800206a <HAL_CAN_IRQHandler+0x320>
 8002024:	2b50      	cmp	r3, #80	@ 0x50
 8002026:	d82a      	bhi.n	800207e <HAL_CAN_IRQHandler+0x334>
 8002028:	2b40      	cmp	r3, #64	@ 0x40
 800202a:	d019      	beq.n	8002060 <HAL_CAN_IRQHandler+0x316>
 800202c:	2b40      	cmp	r3, #64	@ 0x40
 800202e:	d826      	bhi.n	800207e <HAL_CAN_IRQHandler+0x334>
 8002030:	2b30      	cmp	r3, #48	@ 0x30
 8002032:	d010      	beq.n	8002056 <HAL_CAN_IRQHandler+0x30c>
 8002034:	2b30      	cmp	r3, #48	@ 0x30
 8002036:	d822      	bhi.n	800207e <HAL_CAN_IRQHandler+0x334>
 8002038:	2b10      	cmp	r3, #16
 800203a:	d002      	beq.n	8002042 <HAL_CAN_IRQHandler+0x2f8>
 800203c:	2b20      	cmp	r3, #32
 800203e:	d005      	beq.n	800204c <HAL_CAN_IRQHandler+0x302>
 8002040:	e01d      	b.n	800207e <HAL_CAN_IRQHandler+0x334>
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	f043 0308 	orr.w	r3, r3, #8
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
 800204a:	e019      	b.n	8002080 <HAL_CAN_IRQHandler+0x336>
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	f043 0310 	orr.w	r3, r3, #16
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
 8002054:	e014      	b.n	8002080 <HAL_CAN_IRQHandler+0x336>
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	f043 0320 	orr.w	r3, r3, #32
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
 800205e:	e00f      	b.n	8002080 <HAL_CAN_IRQHandler+0x336>
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
 8002068:	e00a      	b.n	8002080 <HAL_CAN_IRQHandler+0x336>
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
 8002072:	e005      	b.n	8002080 <HAL_CAN_IRQHandler+0x336>
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
 800207c:	e000      	b.n	8002080 <HAL_CAN_IRQHandler+0x336>
 800207e:	bf00      	nop
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800208e:	619a      	str	r2, [r3, #24]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2204      	movs	r2, #4
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	2b00      	cmp	r3, #0
 800209c:	d008      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x366>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f867 	bl	800217e <HAL_CAN_ErrorCallback>
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	@ 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_CAN_TxMailbox0CompleteCallback>:
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <HAL_CAN_TxMailbox1CompleteCallback>:
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_CAN_TxMailbox2CompleteCallback>:
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <HAL_CAN_TxMailbox0AbortCallback>:
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_CAN_TxMailbox1AbortCallback>:
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <HAL_CAN_TxMailbox2AbortCallback>:
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <HAL_CAN_RxFifo0FullCallback>:
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_CAN_RxFifo1FullCallback>:
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_CAN_SleepCallback>:
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_CAN_WakeUpFromRxMsgCallback>:
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <HAL_CAN_ErrorCallback>:
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <__NVIC_SetPriorityGrouping>:
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021ac:	4013      	ands	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	021a      	lsls	r2, r3, #8
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60d3      	str	r3, [r2, #12]
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_GetPriorityGrouping>:
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4b04      	ldr	r3, [pc, #16]	@ (80021f0 <__NVIC_GetPriorityGrouping+0x18>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_EnableIRQ>:
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	2b00      	cmp	r3, #0
 8002204:	db0b      	blt.n	800221e <__NVIC_EnableIRQ+0x2a>
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	f003 021f 	and.w	r2, r3, #31
 800220c:	4906      	ldr	r1, [pc, #24]	@ (8002228 <__NVIC_EnableIRQ+0x34>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	2001      	movs	r0, #1
 8002216:	fa00 f202 	lsl.w	r2, r0, r2
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100

0800222c <__NVIC_SetPriority>:
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	71fb      	strb	r3, [r7, #7]
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db0a      	blt.n	8002256 <__NVIC_SetPriority+0x2a>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	490c      	ldr	r1, [pc, #48]	@ (8002278 <__NVIC_SetPriority+0x4c>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	440b      	add	r3, r1
 8002250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002254:	e00a      	b.n	800226c <__NVIC_SetPriority+0x40>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4908      	ldr	r1, [pc, #32]	@ (800227c <__NVIC_SetPriority+0x50>)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3b04      	subs	r3, #4
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	440b      	add	r3, r1
 800226a:	761a      	strb	r2, [r3, #24]
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000e100 	.word	0xe000e100
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <NVIC_EncodePriority>:
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	@ 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f1c3 0307 	rsb	r3, r3, #7
 800229a:	2b04      	cmp	r3, #4
 800229c:	bf28      	it	cs
 800229e:	2304      	movcs	r3, #4
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d902      	bls.n	80022b0 <NVIC_EncodePriority+0x30>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3b03      	subs	r3, #3
 80022ae:	e000      	b.n	80022b2 <NVIC_EncodePriority+0x32>
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	400b      	ands	r3, r1
 80022d8:	4313      	orrs	r3, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	@ 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <SysTick_Config>:
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f4:	d301      	bcc.n	80022fa <SysTick_Config+0x16>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00f      	b.n	800231a <SysTick_Config+0x36>
 80022fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002324 <SysTick_Config+0x40>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	6053      	str	r3, [r2, #4]
 8002302:	210f      	movs	r1, #15
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f7ff ff90 	bl	800222c <__NVIC_SetPriority>
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <SysTick_Config+0x40>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <SysTick_Config+0x40>)
 8002314:	2207      	movs	r2, #7
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	2300      	movs	r3, #0
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	e000e010 	.word	0xe000e010

08002328 <HAL_NVIC_SetPriorityGrouping>:
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff2d 	bl	8002190 <__NVIC_SetPriorityGrouping>
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_SetPriority>:
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	f7ff ff42 	bl	80021d8 <__NVIC_GetPriorityGrouping>
 8002354:	6178      	str	r0, [r7, #20]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	6978      	ldr	r0, [r7, #20]
 800235c:	f7ff ff90 	bl	8002280 <NVIC_EncodePriority>
 8002360:	4602      	mov	r2, r0
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff5f 	bl	800222c <__NVIC_SetPriority>
 800236e:	bf00      	nop
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_EnableIRQ>:
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	71fb      	strb	r3, [r7, #7]
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff35 	bl	80021f4 <__NVIC_EnableIRQ>
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_SYSTICK_Config>:
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ffa2 	bl	80022e4 <SysTick_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_GPIO_Init>:
 80023ac:	b480      	push	{r7}
 80023ae:	b08b      	sub	sp, #44	@ 0x2c
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
 80023be:	e169      	b.n	8002694 <HAL_GPIO_Init+0x2e8>
 80023c0:	2201      	movs	r2, #1
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 8158 	bne.w	800268e <HAL_GPIO_Init+0x2e2>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a9a      	ldr	r2, [pc, #616]	@ (800264c <HAL_GPIO_Init+0x2a0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d05e      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
 80023e8:	4a98      	ldr	r2, [pc, #608]	@ (800264c <HAL_GPIO_Init+0x2a0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d875      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 80023ee:	4a98      	ldr	r2, [pc, #608]	@ (8002650 <HAL_GPIO_Init+0x2a4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d058      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
 80023f4:	4a96      	ldr	r2, [pc, #600]	@ (8002650 <HAL_GPIO_Init+0x2a4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d86f      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 80023fa:	4a96      	ldr	r2, [pc, #600]	@ (8002654 <HAL_GPIO_Init+0x2a8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d052      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
 8002400:	4a94      	ldr	r2, [pc, #592]	@ (8002654 <HAL_GPIO_Init+0x2a8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d869      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 8002406:	4a94      	ldr	r2, [pc, #592]	@ (8002658 <HAL_GPIO_Init+0x2ac>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d04c      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
 800240c:	4a92      	ldr	r2, [pc, #584]	@ (8002658 <HAL_GPIO_Init+0x2ac>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d863      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 8002412:	4a92      	ldr	r2, [pc, #584]	@ (800265c <HAL_GPIO_Init+0x2b0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d046      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
 8002418:	4a90      	ldr	r2, [pc, #576]	@ (800265c <HAL_GPIO_Init+0x2b0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d85d      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 800241e:	2b12      	cmp	r3, #18
 8002420:	d82a      	bhi.n	8002478 <HAL_GPIO_Init+0xcc>
 8002422:	2b12      	cmp	r3, #18
 8002424:	d859      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 8002426:	a201      	add	r2, pc, #4	@ (adr r2, 800242c <HAL_GPIO_Init+0x80>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	080024a7 	.word	0x080024a7
 8002430:	08002481 	.word	0x08002481
 8002434:	08002493 	.word	0x08002493
 8002438:	080024d5 	.word	0x080024d5
 800243c:	080024db 	.word	0x080024db
 8002440:	080024db 	.word	0x080024db
 8002444:	080024db 	.word	0x080024db
 8002448:	080024db 	.word	0x080024db
 800244c:	080024db 	.word	0x080024db
 8002450:	080024db 	.word	0x080024db
 8002454:	080024db 	.word	0x080024db
 8002458:	080024db 	.word	0x080024db
 800245c:	080024db 	.word	0x080024db
 8002460:	080024db 	.word	0x080024db
 8002464:	080024db 	.word	0x080024db
 8002468:	080024db 	.word	0x080024db
 800246c:	080024db 	.word	0x080024db
 8002470:	08002489 	.word	0x08002489
 8002474:	0800249d 	.word	0x0800249d
 8002478:	4a79      	ldr	r2, [pc, #484]	@ (8002660 <HAL_GPIO_Init+0x2b4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
 800247e:	e02c      	b.n	80024da <HAL_GPIO_Init+0x12e>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	623b      	str	r3, [r7, #32]
 8002486:	e029      	b.n	80024dc <HAL_GPIO_Init+0x130>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	3304      	adds	r3, #4
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	e024      	b.n	80024dc <HAL_GPIO_Init+0x130>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	3308      	adds	r3, #8
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	e01f      	b.n	80024dc <HAL_GPIO_Init+0x130>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	330c      	adds	r3, #12
 80024a2:	623b      	str	r3, [r7, #32]
 80024a4:	e01a      	b.n	80024dc <HAL_GPIO_Init+0x130>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_GPIO_Init+0x108>
 80024ae:	2304      	movs	r3, #4
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	e013      	b.n	80024dc <HAL_GPIO_Init+0x130>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <HAL_GPIO_Init+0x11c>
 80024bc:	2308      	movs	r3, #8
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	e009      	b.n	80024dc <HAL_GPIO_Init+0x130>
 80024c8:	2308      	movs	r3, #8
 80024ca:	623b      	str	r3, [r7, #32]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	615a      	str	r2, [r3, #20]
 80024d2:	e003      	b.n	80024dc <HAL_GPIO_Init+0x130>
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	e000      	b.n	80024dc <HAL_GPIO_Init+0x130>
 80024da:	bf00      	nop
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2bff      	cmp	r3, #255	@ 0xff
 80024e0:	d801      	bhi.n	80024e6 <HAL_GPIO_Init+0x13a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	e001      	b.n	80024ea <HAL_GPIO_Init+0x13e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2bff      	cmp	r3, #255	@ 0xff
 80024f0:	d802      	bhi.n	80024f8 <HAL_GPIO_Init+0x14c>
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	e002      	b.n	80024fe <HAL_GPIO_Init+0x152>
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	3b08      	subs	r3, #8
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	210f      	movs	r1, #15
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	6a39      	ldr	r1, [r7, #32]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	431a      	orrs	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80b1 	beq.w	800268e <HAL_GPIO_Init+0x2e2>
 800252c:	4b4d      	ldr	r3, [pc, #308]	@ (8002664 <HAL_GPIO_Init+0x2b8>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a4c      	ldr	r2, [pc, #304]	@ (8002664 <HAL_GPIO_Init+0x2b8>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <HAL_GPIO_Init+0x2b8>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4a48      	ldr	r2, [pc, #288]	@ (8002668 <HAL_GPIO_Init+0x2bc>)
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4013      	ands	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a40      	ldr	r2, [pc, #256]	@ (800266c <HAL_GPIO_Init+0x2c0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <HAL_GPIO_Init+0x1ec>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3f      	ldr	r2, [pc, #252]	@ (8002670 <HAL_GPIO_Init+0x2c4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00d      	beq.n	8002594 <HAL_GPIO_Init+0x1e8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3e      	ldr	r2, [pc, #248]	@ (8002674 <HAL_GPIO_Init+0x2c8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <HAL_GPIO_Init+0x1e4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3d      	ldr	r2, [pc, #244]	@ (8002678 <HAL_GPIO_Init+0x2cc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_GPIO_Init+0x1e0>
 8002588:	2303      	movs	r3, #3
 800258a:	e006      	b.n	800259a <HAL_GPIO_Init+0x1ee>
 800258c:	2304      	movs	r3, #4
 800258e:	e004      	b.n	800259a <HAL_GPIO_Init+0x1ee>
 8002590:	2302      	movs	r3, #2
 8002592:	e002      	b.n	800259a <HAL_GPIO_Init+0x1ee>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_GPIO_Init+0x1ee>
 8002598:	2300      	movs	r3, #0
 800259a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800259c:	f002 0203 	and.w	r2, r2, #3
 80025a0:	0092      	lsls	r2, r2, #2
 80025a2:	4093      	lsls	r3, r2
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	492f      	ldr	r1, [pc, #188]	@ (8002668 <HAL_GPIO_Init+0x2bc>)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d006      	beq.n	80025d2 <HAL_GPIO_Init+0x226>
 80025c4:	4b2d      	ldr	r3, [pc, #180]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	492c      	ldr	r1, [pc, #176]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]
 80025d0:	e006      	b.n	80025e0 <HAL_GPIO_Init+0x234>
 80025d2:	4b2a      	ldr	r3, [pc, #168]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	43db      	mvns	r3, r3
 80025da:	4928      	ldr	r1, [pc, #160]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025dc:	4013      	ands	r3, r2
 80025de:	608b      	str	r3, [r1, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d006      	beq.n	80025fa <HAL_GPIO_Init+0x24e>
 80025ec:	4b23      	ldr	r3, [pc, #140]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	4922      	ldr	r1, [pc, #136]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60cb      	str	r3, [r1, #12]
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x25c>
 80025fa:	4b20      	ldr	r3, [pc, #128]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	43db      	mvns	r3, r3
 8002602:	491e      	ldr	r1, [pc, #120]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 8002604:	4013      	ands	r3, r2
 8002606:	60cb      	str	r3, [r1, #12]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d006      	beq.n	8002622 <HAL_GPIO_Init+0x276>
 8002614:	4b19      	ldr	r3, [pc, #100]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4918      	ldr	r1, [pc, #96]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x284>
 8002622:	4b16      	ldr	r3, [pc, #88]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	43db      	mvns	r3, r3
 800262a:	4914      	ldr	r1, [pc, #80]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 800262c:	4013      	ands	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d021      	beq.n	8002680 <HAL_GPIO_Init+0x2d4>
 800263c:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	490e      	ldr	r1, [pc, #56]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e021      	b.n	800268e <HAL_GPIO_Init+0x2e2>
 800264a:	bf00      	nop
 800264c:	10320000 	.word	0x10320000
 8002650:	10310000 	.word	0x10310000
 8002654:	10220000 	.word	0x10220000
 8002658:	10210000 	.word	0x10210000
 800265c:	10120000 	.word	0x10120000
 8002660:	10110000 	.word	0x10110000
 8002664:	40021000 	.word	0x40021000
 8002668:	40010000 	.word	0x40010000
 800266c:	40010800 	.word	0x40010800
 8002670:	40010c00 	.word	0x40010c00
 8002674:	40011000 	.word	0x40011000
 8002678:	40011400 	.word	0x40011400
 800267c:	40010400 	.word	0x40010400
 8002680:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	43db      	mvns	r3, r3
 8002688:	4909      	ldr	r1, [pc, #36]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 800268a:	4013      	ands	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	3301      	adds	r3, #1
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	fa22 f303 	lsr.w	r3, r2, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f47f ae8e 	bne.w	80023c0 <HAL_GPIO_Init+0x14>
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	372c      	adds	r7, #44	@ 0x2c
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_GPIO_WritePin>:
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
 80026c0:	4613      	mov	r3, r2
 80026c2:	707b      	strb	r3, [r7, #1]
 80026c4:	787b      	ldrb	r3, [r7, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_WritePin+0x1e>
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	e003      	b.n	80026da <HAL_GPIO_WritePin+0x26>
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	041a      	lsls	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	611a      	str	r2, [r3, #16]
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <HAL_I2C_Init>:
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_I2C_Init+0x12>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e12b      	b.n	800294e <HAL_I2C_Init+0x26a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_I2C_Init+0x2c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe f990 	bl	8000a30 <HAL_I2C_MspInit>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2224      	movs	r2, #36	@ 0x24
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f001 fbca 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4a81      	ldr	r2, [pc, #516]	@ (8002958 <HAL_I2C_Init+0x274>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d807      	bhi.n	8002768 <HAL_I2C_Init+0x84>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a80      	ldr	r2, [pc, #512]	@ (800295c <HAL_I2C_Init+0x278>)
 800275c:	4293      	cmp	r3, r2
 800275e:	bf94      	ite	ls
 8002760:	2301      	movls	r3, #1
 8002762:	2300      	movhi	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	e006      	b.n	8002776 <HAL_I2C_Init+0x92>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a7d      	ldr	r2, [pc, #500]	@ (8002960 <HAL_I2C_Init+0x27c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	bf94      	ite	ls
 8002770:	2301      	movls	r3, #1
 8002772:	2300      	movhi	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_Init+0x9a>
 800277a:	2301      	movs	r3, #1
 800277c:	e0e7      	b.n	800294e <HAL_I2C_Init+0x26a>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a78      	ldr	r2, [pc, #480]	@ (8002964 <HAL_I2C_Init+0x280>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0c9b      	lsrs	r3, r3, #18
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002958 <HAL_I2C_Init+0x274>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d802      	bhi.n	80027b8 <HAL_I2C_Init+0xd4>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3301      	adds	r3, #1
 80027b6:	e009      	b.n	80027cc <HAL_I2C_Init+0xe8>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	4a69      	ldr	r2, [pc, #420]	@ (8002968 <HAL_I2C_Init+0x284>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	3301      	adds	r3, #1
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	495c      	ldr	r1, [pc, #368]	@ (8002958 <HAL_I2C_Init+0x274>)
 80027e8:	428b      	cmp	r3, r1
 80027ea:	d819      	bhi.n	8002820 <HAL_I2C_Init+0x13c>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1e59      	subs	r1, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027fa:	1c59      	adds	r1, r3, #1
 80027fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002800:	400b      	ands	r3, r1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_I2C_Init+0x138>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1e59      	subs	r1, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fbb1 f3f3 	udiv	r3, r1, r3
 8002814:	3301      	adds	r3, #1
 8002816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800281a:	e051      	b.n	80028c0 <HAL_I2C_Init+0x1dc>
 800281c:	2304      	movs	r3, #4
 800281e:	e04f      	b.n	80028c0 <HAL_I2C_Init+0x1dc>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d111      	bne.n	800284c <HAL_I2C_Init+0x168>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e58      	subs	r0, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	440b      	add	r3, r1
 8002836:	fbb0 f3f3 	udiv	r3, r0, r3
 800283a:	3301      	adds	r3, #1
 800283c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e012      	b.n	8002872 <HAL_I2C_Init+0x18e>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	0099      	lsls	r1, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Init+0x196>
 8002876:	2301      	movs	r3, #1
 8002878:	e022      	b.n	80028c0 <HAL_I2C_Init+0x1dc>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10e      	bne.n	80028a0 <HAL_I2C_Init+0x1bc>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1e58      	subs	r0, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	440b      	add	r3, r1
 8002890:	fbb0 f3f3 	udiv	r3, r0, r3
 8002894:	3301      	adds	r3, #1
 8002896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800289e:	e00f      	b.n	80028c0 <HAL_I2C_Init+0x1dc>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1e58      	subs	r0, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	0099      	lsls	r1, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	6809      	ldr	r1, [r1, #0]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61cb      	str	r3, [r1, #28]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6911      	ldr	r1, [r2, #16]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	430b      	orrs	r3, r1
 8002902:	6093      	str	r3, [r2, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	641a      	str	r2, [r3, #64]	@ 0x40
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800294c:	2300      	movs	r3, #0
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	000186a0 	.word	0x000186a0
 800295c:	001e847f 	.word	0x001e847f
 8002960:	003d08ff 	.word	0x003d08ff
 8002964:	431bde83 	.word	0x431bde83
 8002968:	10624dd3 	.word	0x10624dd3

0800296c <HAL_I2C_Master_Transmit>:
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	461a      	mov	r2, r3
 8002978:	460b      	mov	r3, r1
 800297a:	817b      	strh	r3, [r7, #10]
 800297c:	4613      	mov	r3, r2
 800297e:	813b      	strh	r3, [r7, #8]
 8002980:	f7fe fd98 	bl	80014b4 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b20      	cmp	r3, #32
 8002990:	f040 80e0 	bne.w	8002b54 <HAL_I2C_Master_Transmit+0x1e8>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2319      	movs	r3, #25
 800299a:	2201      	movs	r2, #1
 800299c:	4970      	ldr	r1, [pc, #448]	@ (8002b60 <HAL_I2C_Master_Transmit+0x1f4>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fc9e 	bl	80032e0 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Master_Transmit+0x42>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e0d3      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_I2C_Master_Transmit+0x50>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e0cc      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d007      	beq.n	80029e2 <HAL_I2C_Master_Transmit+0x76>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2221      	movs	r2, #33	@ 0x21
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2210      	movs	r2, #16
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	893a      	ldrh	r2, [r7, #8]
 8002a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a50      	ldr	r2, [pc, #320]	@ (8002b64 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a22:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a24:	8979      	ldrh	r1, [r7, #10]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fb08 	bl	8003040 <I2C_MasterRequestWrite>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0xce>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e08d      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	e066      	b.n	8002b20 <HAL_I2C_Master_Transmit+0x1b4>
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fd5c 	bl	8003514 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <HAL_I2C_Master_Transmit+0x112>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <HAL_I2C_Master_Transmit+0x10e>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06b      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	611a      	str	r2, [r3, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d11b      	bne.n	8002af4 <HAL_I2C_Master_Transmit+0x188>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d017      	beq.n	8002af4 <HAL_I2C_Master_Transmit+0x188>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	611a      	str	r2, [r3, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	6a39      	ldr	r1, [r7, #32]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fd53 	bl	80035a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <HAL_I2C_Master_Transmit+0x1b4>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d107      	bne.n	8002b1c <HAL_I2C_Master_Transmit+0x1b0>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e01a      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d194      	bne.n	8002a52 <HAL_I2C_Master_Transmit+0xe6>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
 8002b54:	2302      	movs	r3, #2
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	00100002 	.word	0x00100002
 8002b64:	ffff0000 	.word	0xffff0000

08002b68 <HAL_I2C_Master_Receive>:
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	@ 0x30
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	461a      	mov	r2, r3
 8002b74:	460b      	mov	r3, r1
 8002b76:	817b      	strh	r3, [r7, #10]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	813b      	strh	r3, [r7, #8]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	623b      	str	r3, [r7, #32]
 8002b80:	f7fe fc98 	bl	80014b4 <HAL_GetTick>
 8002b84:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	f040 824b 	bne.w	800302a <HAL_I2C_Master_Receive+0x4c2>
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2319      	movs	r3, #25
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	497f      	ldr	r1, [pc, #508]	@ (8002d9c <HAL_I2C_Master_Receive+0x234>)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fb9e 	bl	80032e0 <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_Master_Receive+0x46>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e23e      	b.n	800302c <HAL_I2C_Master_Receive+0x4c4>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_I2C_Master_Receive+0x54>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e237      	b.n	800302c <HAL_I2C_Master_Receive+0x4c4>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d007      	beq.n	8002be2 <HAL_I2C_Master_Receive+0x7a>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2222      	movs	r2, #34	@ 0x22
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	893a      	ldrh	r2, [r7, #8]
 8002c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4a5f      	ldr	r2, [pc, #380]	@ (8002da0 <HAL_I2C_Master_Receive+0x238>)
 8002c22:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c24:	8979      	ldrh	r1, [r7, #10]
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 fa8a 	bl	8003144 <I2C_MasterRequestRead>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Master_Receive+0xd2>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e1f8      	b.n	800302c <HAL_I2C_Master_Receive+0x4c4>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d113      	bne.n	8002c6a <HAL_I2C_Master_Receive+0x102>
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e1cc      	b.n	8003004 <HAL_I2C_Master_Receive+0x49c>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d11e      	bne.n	8002cb0 <HAL_I2C_Master_Receive+0x148>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	b672      	cpsid	i
 8002c84:	bf00      	nop
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	b662      	cpsie	i
 8002cae:	e035      	b.n	8002d1c <HAL_I2C_Master_Receive+0x1b4>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d11e      	bne.n	8002cf6 <HAL_I2C_Master_Receive+0x18e>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	b672      	cpsid	i
 8002cca:	bf00      	nop
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	b662      	cpsie	i
 8002cf4:	e012      	b.n	8002d1c <HAL_I2C_Master_Receive+0x1b4>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	e172      	b.n	8003004 <HAL_I2C_Master_Receive+0x49c>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	f200 811f 	bhi.w	8002f66 <HAL_I2C_Master_Receive+0x3fe>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d123      	bne.n	8002d78 <HAL_I2C_Master_Receive+0x210>
 8002d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fc7d 	bl	8003634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Master_Receive+0x1dc>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e173      	b.n	800302c <HAL_I2C_Master_Receive+0x4c4>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d76:	e145      	b.n	8003004 <HAL_I2C_Master_Receive+0x49c>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d152      	bne.n	8002e26 <HAL_I2C_Master_Receive+0x2be>
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d86:	2200      	movs	r2, #0
 8002d88:	4906      	ldr	r1, [pc, #24]	@ (8002da4 <HAL_I2C_Master_Receive+0x23c>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 faa8 	bl	80032e0 <I2C_WaitOnFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_I2C_Master_Receive+0x240>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e148      	b.n	800302c <HAL_I2C_Master_Receive+0x4c4>
 8002d9a:	bf00      	nop
 8002d9c:	00100002 	.word	0x00100002
 8002da0:	ffff0000 	.word	0xffff0000
 8002da4:	00010004 	.word	0x00010004
 8002da8:	b672      	cpsid	i
 8002daa:	bf00      	nop
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dee:	b662      	cpsie	i
 8002df0:	bf00      	nop
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e24:	e0ee      	b.n	8003004 <HAL_I2C_Master_Receive+0x49c>
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	4981      	ldr	r1, [pc, #516]	@ (8003034 <HAL_I2C_Master_Receive+0x4cc>)
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 fa55 	bl	80032e0 <I2C_WaitOnFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_I2C_Master_Receive+0x2d8>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0f5      	b.n	800302c <HAL_I2C_Master_Receive+0x4c4>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	b672      	cpsid	i
 8002e52:	bf00      	nop
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e86:	4b6c      	ldr	r3, [pc, #432]	@ (8003038 <HAL_I2C_Master_Receive+0x4d0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	08db      	lsrs	r3, r3, #3
 8002e8c:	4a6b      	ldr	r2, [pc, #428]	@ (800303c <HAL_I2C_Master_Receive+0x4d4>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	0a1a      	lsrs	r2, r3, #8
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00da      	lsls	r2, r3, #3
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d118      	bne.n	8002ede <HAL_I2C_Master_Receive+0x376>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ece:	b662      	cpsie	i
 8002ed0:	bf00      	nop
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0a6      	b.n	800302c <HAL_I2C_Master_Receive+0x4c4>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d1d9      	bne.n	8002ea0 <HAL_I2C_Master_Receive+0x338>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f2e:	b662      	cpsie	i
 8002f30:	bf00      	nop
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f64:	e04e      	b.n	8003004 <HAL_I2C_Master_Receive+0x49c>
 8002f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fb62 	bl	8003634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Master_Receive+0x412>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e058      	b.n	800302c <HAL_I2C_Master_Receive+0x4c4>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d124      	bne.n	8003004 <HAL_I2C_Master_Receive+0x49c>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d107      	bne.n	8002fd2 <HAL_I2C_Master_Receive+0x46a>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	f47f ae88 	bne.w	8002d1e <HAL_I2C_Master_Receive+0x1b6>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003026:	2300      	movs	r3, #0
 8003028:	e000      	b.n	800302c <HAL_I2C_Master_Receive+0x4c4>
 800302a:	2302      	movs	r3, #2
 800302c:	4618      	mov	r0, r3
 800302e:	3728      	adds	r7, #40	@ 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00010004 	.word	0x00010004
 8003038:	20000028 	.word	0x20000028
 800303c:	14f8b589 	.word	0x14f8b589

08003040 <I2C_MasterRequestWrite>:
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	460b      	mov	r3, r1
 800304e:	817b      	strh	r3, [r7, #10]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d006      	beq.n	800306a <I2C_MasterRequestWrite+0x2a>
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d003      	beq.n	800306a <I2C_MasterRequestWrite+0x2a>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003068:	d108      	bne.n	800307c <I2C_MasterRequestWrite+0x3c>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e00b      	b.n	8003094 <I2C_MasterRequestWrite+0x54>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	2b12      	cmp	r3, #18
 8003082:	d107      	bne.n	8003094 <I2C_MasterRequestWrite+0x54>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f91d 	bl	80032e0 <I2C_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00d      	beq.n	80030c8 <I2C_MasterRequestWrite+0x88>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ba:	d103      	bne.n	80030c4 <I2C_MasterRequestWrite+0x84>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80030c4:	2303      	movs	r3, #3
 80030c6:	e035      	b.n	8003134 <I2C_MasterRequestWrite+0xf4>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030d0:	d108      	bne.n	80030e4 <I2C_MasterRequestWrite+0xa4>
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030e0:	611a      	str	r2, [r3, #16]
 80030e2:	e01b      	b.n	800311c <I2C_MasterRequestWrite+0xdc>
 80030e4:	897b      	ldrh	r3, [r7, #10]
 80030e6:	11db      	asrs	r3, r3, #7
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f003 0306 	and.w	r3, r3, #6
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f063 030f 	orn	r3, r3, #15
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	490e      	ldr	r1, [pc, #56]	@ (800313c <I2C_MasterRequestWrite+0xfc>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f966 	bl	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_MasterRequestWrite+0xd2>
 800310e:	2301      	movs	r3, #1
 8003110:	e010      	b.n	8003134 <I2C_MasterRequestWrite+0xf4>
 8003112:	897b      	ldrh	r3, [r7, #10]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	611a      	str	r2, [r3, #16]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4907      	ldr	r1, [pc, #28]	@ (8003140 <I2C_MasterRequestWrite+0x100>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f956 	bl	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_MasterRequestWrite+0xf2>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <I2C_MasterRequestWrite+0xf4>
 8003132:	2300      	movs	r3, #0
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	00010008 	.word	0x00010008
 8003140:	00010002 	.word	0x00010002

08003144 <I2C_MasterRequestRead>:
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	460b      	mov	r3, r1
 8003152:	817b      	strh	r3, [r7, #10]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d006      	beq.n	800317e <I2C_MasterRequestRead+0x3a>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d003      	beq.n	800317e <I2C_MasterRequestRead+0x3a>
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800317c:	d108      	bne.n	8003190 <I2C_MasterRequestRead+0x4c>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e00b      	b.n	80031a8 <I2C_MasterRequestRead+0x64>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	2b11      	cmp	r3, #17
 8003196:	d107      	bne.n	80031a8 <I2C_MasterRequestRead+0x64>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f893 	bl	80032e0 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00d      	beq.n	80031dc <I2C_MasterRequestRead+0x98>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ce:	d103      	bne.n	80031d8 <I2C_MasterRequestRead+0x94>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80031d8:	2303      	movs	r3, #3
 80031da:	e079      	b.n	80032d0 <I2C_MasterRequestRead+0x18c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031e4:	d108      	bne.n	80031f8 <I2C_MasterRequestRead+0xb4>
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	611a      	str	r2, [r3, #16]
 80031f6:	e05f      	b.n	80032b8 <I2C_MasterRequestRead+0x174>
 80031f8:	897b      	ldrh	r3, [r7, #10]
 80031fa:	11db      	asrs	r3, r3, #7
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 0306 	and.w	r3, r3, #6
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f063 030f 	orn	r3, r3, #15
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	611a      	str	r2, [r3, #16]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4930      	ldr	r1, [pc, #192]	@ (80032d8 <I2C_MasterRequestRead+0x194>)
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f8dc 	bl	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <I2C_MasterRequestRead+0xe2>
 8003222:	2301      	movs	r3, #1
 8003224:	e054      	b.n	80032d0 <I2C_MasterRequestRead+0x18c>
 8003226:	897b      	ldrh	r3, [r7, #10]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	611a      	str	r2, [r3, #16]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4929      	ldr	r1, [pc, #164]	@ (80032dc <I2C_MasterRequestRead+0x198>)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f8cc 	bl	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <I2C_MasterRequestRead+0x102>
 8003242:	2301      	movs	r3, #1
 8003244:	e044      	b.n	80032d0 <I2C_MasterRequestRead+0x18c>
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f831 	bl	80032e0 <I2C_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00d      	beq.n	80032a0 <I2C_MasterRequestRead+0x15c>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003292:	d103      	bne.n	800329c <I2C_MasterRequestRead+0x158>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40
 800329c:	2303      	movs	r3, #3
 800329e:	e017      	b.n	80032d0 <I2C_MasterRequestRead+0x18c>
 80032a0:	897b      	ldrh	r3, [r7, #10]
 80032a2:	11db      	asrs	r3, r3, #7
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f003 0306 	and.w	r3, r3, #6
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f063 030e 	orn	r3, r3, #14
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	611a      	str	r2, [r3, #16]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4907      	ldr	r1, [pc, #28]	@ (80032dc <I2C_MasterRequestRead+0x198>)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f888 	bl	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_MasterRequestRead+0x18a>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <I2C_MasterRequestRead+0x18c>
 80032ce:	2300      	movs	r3, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	00010008 	.word	0x00010008
 80032dc:	00010002 	.word	0x00010002

080032e0 <I2C_WaitOnFlagUntilTimeout>:
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	71fb      	strb	r3, [r7, #7]
 80032f0:	e048      	b.n	8003384 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d044      	beq.n	8003384 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80032fa:	f7fe f8db 	bl	80014b4 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d139      	bne.n	8003384 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	0c1b      	lsrs	r3, r3, #16
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d10d      	bne.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x56>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	43da      	mvns	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4013      	ands	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	e00c      	b.n	8003350 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	43da      	mvns	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4013      	ands	r3, r2
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	429a      	cmp	r2, r3
 8003354:	d116      	bne.n	8003384 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	@ 0x30
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	f043 0220 	orr.w	r2, r3, #32
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	641a      	str	r2, [r3, #64]	@ 0x40
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003380:	2301      	movs	r3, #1
 8003382:	e023      	b.n	80033cc <I2C_WaitOnFlagUntilTimeout+0xec>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d10d      	bne.n	80033aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	43da      	mvns	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	4013      	ands	r3, r2
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	e00c      	b.n	80033c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	43da      	mvns	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	4013      	ands	r3, r2
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d093      	beq.n	80032f2 <I2C_WaitOnFlagUntilTimeout+0x12>
 80033ca:	2300      	movs	r3, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	e071      	b.n	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f2:	d123      	bne.n	800343c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800340c:	615a      	str	r2, [r3, #20]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003438:	2301      	movs	r3, #1
 800343a:	e067      	b.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d041      	beq.n	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8003444:	f7fe f836 	bl	80014b4 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	d302      	bcc.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d136      	bne.n	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d10c      	bne.n	800347e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	43da      	mvns	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4013      	ands	r3, r2
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	bf14      	ite	ne
 8003476:	2301      	movne	r3, #1
 8003478:	2300      	moveq	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	e00b      	b.n	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	43da      	mvns	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4013      	ands	r3, r2
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf14      	ite	ne
 8003490:	2301      	movne	r3, #1
 8003492:	2300      	moveq	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80034c4:	2301      	movs	r3, #1
 80034c6:	e021      	b.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	0c1b      	lsrs	r3, r3, #16
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10c      	bne.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	43da      	mvns	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4013      	ands	r3, r2
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e00b      	b.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	f47f af6d 	bne.w	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800350a:	2300      	movs	r3, #0
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_WaitOnTXEFlagUntilTimeout>:
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	e034      	b.n	800358c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f8e3 	bl	80036ee <I2C_IsAcknowledgeFailed>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800352e:	2301      	movs	r3, #1
 8003530:	e034      	b.n	800359c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d028      	beq.n	800358c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800353a:	f7fd ffbb 	bl	80014b4 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d11d      	bne.n	800358c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355a:	2b80      	cmp	r3, #128	@ 0x80
 800355c:	d016      	beq.n	800358c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003588:	2301      	movs	r3, #1
 800358a:	e007      	b.n	800359c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003596:	2b80      	cmp	r3, #128	@ 0x80
 8003598:	d1c3      	bne.n	8003522 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 800359a:	2300      	movs	r3, #0
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_WaitOnBTFFlagUntilTimeout>:
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	e034      	b.n	800361c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f89b 	bl	80036ee <I2C_IsAcknowledgeFailed>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 80035be:	2301      	movs	r3, #1
 80035c0:	e034      	b.n	800362c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d028      	beq.n	800361c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80035ca:	f7fd ff73 	bl	80014b4 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11d      	bne.n	800361c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d016      	beq.n	800361c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003618:	2301      	movs	r3, #1
 800361a:	e007      	b.n	800362c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b04      	cmp	r3, #4
 8003628:	d1c3      	bne.n	80035b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 800362a:	2300      	movs	r3, #0
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	e049      	b.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b10      	cmp	r3, #16
 800364e:	d119      	bne.n	8003684 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0210 	mvn.w	r2, #16
 8003658:	615a      	str	r2, [r3, #20]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	641a      	str	r2, [r3, #64]	@ 0x40
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003680:	2301      	movs	r3, #1
 8003682:	e030      	b.n	80036e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8003684:	f7fd ff16 	bl	80014b4 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d11d      	bne.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a4:	2b40      	cmp	r3, #64	@ 0x40
 80036a6:	d016      	beq.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	f043 0220 	orr.w	r2, r3, #32
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80036d2:	2301      	movs	r3, #1
 80036d4:	e007      	b.n	80036e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e0:	2b40      	cmp	r3, #64	@ 0x40
 80036e2:	d1ae      	bne.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80036e4:	2300      	movs	r3, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <I2C_IsAcknowledgeFailed>:
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003704:	d11b      	bne.n	800373e <I2C_IsAcknowledgeFailed+0x50>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800370e:	615a      	str	r2, [r3, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	@ 0x30
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	f043 0204 	orr.w	r2, r3, #4
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	641a      	str	r2, [r3, #64]	@ 0x40
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <I2C_IsAcknowledgeFailed+0x52>
 800373e:	2300      	movs	r3, #0
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
	...

0800374c <HAL_RCC_OscConfig>:
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x12>
 800375a:	2301      	movs	r3, #1
 800375c:	e272      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8087 	beq.w	800387a <HAL_RCC_OscConfig+0x12e>
 800376c:	4b92      	ldr	r3, [pc, #584]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b04      	cmp	r3, #4
 8003776:	d00c      	beq.n	8003792 <HAL_RCC_OscConfig+0x46>
 8003778:	4b8f      	ldr	r3, [pc, #572]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b08      	cmp	r3, #8
 8003782:	d112      	bne.n	80037aa <HAL_RCC_OscConfig+0x5e>
 8003784:	4b8c      	ldr	r3, [pc, #560]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003790:	d10b      	bne.n	80037aa <HAL_RCC_OscConfig+0x5e>
 8003792:	4b89      	ldr	r3, [pc, #548]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d06c      	beq.n	8003878 <HAL_RCC_OscConfig+0x12c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d168      	bne.n	8003878 <HAL_RCC_OscConfig+0x12c>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e24c      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x76>
 80037b4:	4b80      	ldr	r3, [pc, #512]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a7f      	ldr	r2, [pc, #508]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	e02e      	b.n	8003820 <HAL_RCC_OscConfig+0xd4>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x98>
 80037ca:	4b7b      	ldr	r3, [pc, #492]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a7a      	ldr	r2, [pc, #488]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b78      	ldr	r3, [pc, #480]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a77      	ldr	r2, [pc, #476]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e01d      	b.n	8003820 <HAL_RCC_OscConfig+0xd4>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0xbc>
 80037ee:	4b72      	ldr	r3, [pc, #456]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a71      	ldr	r2, [pc, #452]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b6f      	ldr	r3, [pc, #444]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a6e      	ldr	r2, [pc, #440]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e00b      	b.n	8003820 <HAL_RCC_OscConfig+0xd4>
 8003808:	4b6b      	ldr	r3, [pc, #428]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a6a      	ldr	r2, [pc, #424]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 800380e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b68      	ldr	r3, [pc, #416]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a67      	ldr	r2, [pc, #412]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 800381a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <HAL_RCC_OscConfig+0x104>
 8003828:	f7fd fe44 	bl	80014b4 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0xf6>
 8003830:	f7fd fe40 	bl	80014b4 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	@ 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0xf6>
 800383e:	2303      	movs	r3, #3
 8003840:	e200      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003842:	4b5d      	ldr	r3, [pc, #372]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0xe4>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x12e>
 8003850:	f7fd fe30 	bl	80014b4 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x11e>
 8003858:	f7fd fe2c 	bl	80014b4 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	@ 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x11e>
 8003866:	2303      	movs	r3, #3
 8003868:	e1ec      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 800386a:	4b53      	ldr	r3, [pc, #332]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x10c>
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x12e>
 8003878:	bf00      	nop
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d063      	beq.n	800394e <HAL_RCC_OscConfig+0x202>
 8003886:	4b4c      	ldr	r3, [pc, #304]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <HAL_RCC_OscConfig+0x15e>
 8003892:	4b49      	ldr	r3, [pc, #292]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b08      	cmp	r3, #8
 800389c:	d11c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x18c>
 800389e:	4b46      	ldr	r3, [pc, #280]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d116      	bne.n	80038d8 <HAL_RCC_OscConfig+0x18c>
 80038aa:	4b43      	ldr	r3, [pc, #268]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_RCC_OscConfig+0x176>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d001      	beq.n	80038c2 <HAL_RCC_OscConfig+0x176>
 80038be:	2301      	movs	r3, #1
 80038c0:	e1c0      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 80038c2:	4b3d      	ldr	r3, [pc, #244]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4939      	ldr	r1, [pc, #228]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]
 80038d6:	e03a      	b.n	800394e <HAL_RCC_OscConfig+0x202>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <HAL_RCC_OscConfig+0x1d6>
 80038e0:	4b36      	ldr	r3, [pc, #216]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f7fd fde5 	bl	80014b4 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x1b4>
 80038ee:	f7fd fde1 	bl	80014b4 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x1b4>
 80038fc:	2303      	movs	r3, #3
 80038fe:	e1a1      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003900:	4b2d      	ldr	r3, [pc, #180]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x1a2>
 800390c:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4927      	ldr	r1, [pc, #156]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 800391c:	4313      	orrs	r3, r2
 800391e:	600b      	str	r3, [r1, #0]
 8003920:	e015      	b.n	800394e <HAL_RCC_OscConfig+0x202>
 8003922:	4b26      	ldr	r3, [pc, #152]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	f7fd fdc4 	bl	80014b4 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x1f6>
 8003930:	f7fd fdc0 	bl	80014b4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x1f6>
 800393e:	2303      	movs	r3, #3
 8003940:	e180      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003942:	4b1d      	ldr	r3, [pc, #116]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x1e4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d03a      	beq.n	80039d0 <HAL_RCC_OscConfig+0x284>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d019      	beq.n	8003996 <HAL_RCC_OscConfig+0x24a>
 8003962:	4b17      	ldr	r3, [pc, #92]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f7fd fda4 	bl	80014b4 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x236>
 8003970:	f7fd fda0 	bl	80014b4 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x236>
 800397e:	2303      	movs	r3, #3
 8003980:	e160      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003982:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <HAL_RCC_OscConfig+0x26c>)
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0x224>
 800398e:	2001      	movs	r0, #1
 8003990:	f000 face 	bl	8003f30 <RCC_Delay>
 8003994:	e01c      	b.n	80039d0 <HAL_RCC_OscConfig+0x284>
 8003996:	4b0a      	ldr	r3, [pc, #40]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f7fd fd8a 	bl	80014b4 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]
 80039a2:	e00f      	b.n	80039c4 <HAL_RCC_OscConfig+0x278>
 80039a4:	f7fd fd86 	bl	80014b4 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d908      	bls.n	80039c4 <HAL_RCC_OscConfig+0x278>
 80039b2:	2303      	movs	r3, #3
 80039b4:	e146      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	42420000 	.word	0x42420000
 80039c0:	42420480 	.word	0x42420480
 80039c4:	4b92      	ldr	r3, [pc, #584]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e9      	bne.n	80039a4 <HAL_RCC_OscConfig+0x258>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80a6 	beq.w	8003b2a <HAL_RCC_OscConfig+0x3de>
 80039de:	2300      	movs	r3, #0
 80039e0:	75fb      	strb	r3, [r7, #23]
 80039e2:	4b8b      	ldr	r3, [pc, #556]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10d      	bne.n	8003a0a <HAL_RCC_OscConfig+0x2be>
 80039ee:	4b88      	ldr	r3, [pc, #544]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	4a87      	ldr	r2, [pc, #540]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f8:	61d3      	str	r3, [r2, #28]
 80039fa:	4b85      	ldr	r3, [pc, #532]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
 8003a0a:	4b82      	ldr	r3, [pc, #520]	@ (8003c14 <HAL_RCC_OscConfig+0x4c8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d118      	bne.n	8003a48 <HAL_RCC_OscConfig+0x2fc>
 8003a16:	4b7f      	ldr	r3, [pc, #508]	@ (8003c14 <HAL_RCC_OscConfig+0x4c8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c14 <HAL_RCC_OscConfig+0x4c8>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	f7fd fd47 	bl	80014b4 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x2f0>
 8003a2a:	f7fd fd43 	bl	80014b4 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b64      	cmp	r3, #100	@ 0x64
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x2f0>
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e103      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003a3c:	4b75      	ldr	r3, [pc, #468]	@ (8003c14 <HAL_RCC_OscConfig+0x4c8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x2de>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d106      	bne.n	8003a5e <HAL_RCC_OscConfig+0x312>
 8003a50:	4b6f      	ldr	r3, [pc, #444]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	4a6e      	ldr	r2, [pc, #440]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6213      	str	r3, [r2, #32]
 8003a5c:	e02d      	b.n	8003aba <HAL_RCC_OscConfig+0x36e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x334>
 8003a66:	4b6a      	ldr	r3, [pc, #424]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4a69      	ldr	r2, [pc, #420]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	6213      	str	r3, [r2, #32]
 8003a72:	4b67      	ldr	r3, [pc, #412]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4a66      	ldr	r2, [pc, #408]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	f023 0304 	bic.w	r3, r3, #4
 8003a7c:	6213      	str	r3, [r2, #32]
 8003a7e:	e01c      	b.n	8003aba <HAL_RCC_OscConfig+0x36e>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d10c      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x356>
 8003a88:	4b61      	ldr	r3, [pc, #388]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4a60      	ldr	r2, [pc, #384]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	f043 0304 	orr.w	r3, r3, #4
 8003a92:	6213      	str	r3, [r2, #32]
 8003a94:	4b5e      	ldr	r3, [pc, #376]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	4a5d      	ldr	r2, [pc, #372]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6213      	str	r3, [r2, #32]
 8003aa0:	e00b      	b.n	8003aba <HAL_RCC_OscConfig+0x36e>
 8003aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4a5a      	ldr	r2, [pc, #360]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	6213      	str	r3, [r2, #32]
 8003aae:	4b58      	ldr	r3, [pc, #352]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	4a57      	ldr	r2, [pc, #348]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	f023 0304 	bic.w	r3, r3, #4
 8003ab8:	6213      	str	r3, [r2, #32]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d015      	beq.n	8003aee <HAL_RCC_OscConfig+0x3a2>
 8003ac2:	f7fd fcf7 	bl	80014b4 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCC_OscConfig+0x394>
 8003aca:	f7fd fcf3 	bl	80014b4 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x394>
 8003adc:	2303      	movs	r3, #3
 8003ade:	e0b1      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ee      	beq.n	8003aca <HAL_RCC_OscConfig+0x37e>
 8003aec:	e014      	b.n	8003b18 <HAL_RCC_OscConfig+0x3cc>
 8003aee:	f7fd fce1 	bl	80014b4 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_OscConfig+0x3c0>
 8003af6:	f7fd fcdd 	bl	80014b4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x3c0>
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e09b      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003b0c:	4b40      	ldr	r3, [pc, #256]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1ee      	bne.n	8003af6 <HAL_RCC_OscConfig+0x3aa>
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d105      	bne.n	8003b2a <HAL_RCC_OscConfig+0x3de>
 8003b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4a3b      	ldr	r2, [pc, #236]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	61d3      	str	r3, [r2, #28]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 8087 	beq.w	8003c42 <HAL_RCC_OscConfig+0x4f6>
 8003b34:	4b36      	ldr	r3, [pc, #216]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 030c 	and.w	r3, r3, #12
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d061      	beq.n	8003c04 <HAL_RCC_OscConfig+0x4b8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d146      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x48a>
 8003b48:	4b33      	ldr	r3, [pc, #204]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f7fd fcb1 	bl	80014b4 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x41c>
 8003b56:	f7fd fcad 	bl	80014b4 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x41c>
 8003b64:	2303      	movs	r3, #3
 8003b66:	e06d      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003b68:	4b29      	ldr	r3, [pc, #164]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCC_OscConfig+0x40a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b7c:	d108      	bne.n	8003b90 <HAL_RCC_OscConfig+0x444>
 8003b7e:	4b24      	ldr	r3, [pc, #144]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	4921      	ldr	r1, [pc, #132]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
 8003b90:	4b1f      	ldr	r3, [pc, #124]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a19      	ldr	r1, [r3, #32]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	491b      	ldr	r1, [pc, #108]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f7fd fc81 	bl	80014b4 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x47c>
 8003bb6:	f7fd fc7d 	bl	80014b4 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x47c>
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e03d      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003bc8:	4b11      	ldr	r3, [pc, #68]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x46a>
 8003bd4:	e035      	b.n	8003c42 <HAL_RCC_OscConfig+0x4f6>
 8003bd6:	4b10      	ldr	r3, [pc, #64]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	f7fd fc6a 	bl	80014b4 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4aa>
 8003be4:	f7fd fc66 	bl	80014b4 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x4aa>
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e026      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003bf6:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x498>
 8003c02:	e01e      	b.n	8003c42 <HAL_RCC_OscConfig+0x4f6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d107      	bne.n	8003c1c <HAL_RCC_OscConfig+0x4d0>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e019      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40007000 	.word	0x40007000
 8003c18:	42420060 	.word	0x42420060
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <HAL_RCC_OscConfig+0x500>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x4f2>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d001      	beq.n	8003c42 <HAL_RCC_OscConfig+0x4f6>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <HAL_RCC_OscConfig+0x4f8>
 8003c42:	2300      	movs	r3, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40021000 	.word	0x40021000

08003c50 <HAL_RCC_ClockConfig>:
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x14>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0d0      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1b6>
 8003c64:	4b6a      	ldr	r3, [pc, #424]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d910      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x44>
 8003c72:	4b67      	ldr	r3, [pc, #412]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 0207 	bic.w	r2, r3, #7
 8003c7a:	4965      	ldr	r1, [pc, #404]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
 8003c82:	4b63      	ldr	r3, [pc, #396]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x44>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0b8      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1b6>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x92>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x68>
 8003cac:	4b59      	ldr	r3, [pc, #356]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a58      	ldr	r2, [pc, #352]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cb6:	6053      	str	r3, [r2, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x80>
 8003cc4:	4b53      	ldr	r3, [pc, #332]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a52      	ldr	r2, [pc, #328]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003cce:	6053      	str	r3, [r2, #4]
 8003cd0:	4b50      	ldr	r3, [pc, #320]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	494d      	ldr	r1, [pc, #308]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d040      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x120>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xb6>
 8003cf6:	4b47      	ldr	r3, [pc, #284]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d115      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1b6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xce>
 8003d0e:	4b41      	ldr	r3, [pc, #260]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e073      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1b6>
 8003d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e06b      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1b6>
 8003d2e:	4b39      	ldr	r3, [pc, #228]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4936      	ldr	r1, [pc, #216]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]
 8003d40:	f7fd fbb8 	bl	80014b4 <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_ClockConfig+0x10e>
 8003d48:	f7fd fbb4 	bl	80014b4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_ClockConfig+0x10e>
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e053      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1b6>
 8003d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 020c 	and.w	r2, r3, #12
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d1eb      	bne.n	8003d48 <HAL_RCC_ClockConfig+0xf8>
 8003d70:	4b27      	ldr	r3, [pc, #156]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d210      	bcs.n	8003da0 <HAL_RCC_ClockConfig+0x150>
 8003d7e:	4b24      	ldr	r3, [pc, #144]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 0207 	bic.w	r2, r3, #7
 8003d86:	4922      	ldr	r1, [pc, #136]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]
 8003d8e:	4b20      	ldr	r3, [pc, #128]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x150>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e032      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1b6>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x16e>
 8003dac:	4b19      	ldr	r3, [pc, #100]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4916      	ldr	r1, [pc, #88]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	604b      	str	r3, [r1, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x18e>
 8003dca:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	490e      	ldr	r1, [pc, #56]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
 8003dde:	f000 f821 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8003de2:	4602      	mov	r2, r0
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	490a      	ldr	r1, [pc, #40]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c8>)
 8003df0:	5ccb      	ldrb	r3, [r1, r3]
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	4a09      	ldr	r2, [pc, #36]	@ (8003e1c <HAL_RCC_ClockConfig+0x1cc>)
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b09      	ldr	r3, [pc, #36]	@ (8003e20 <HAL_RCC_ClockConfig+0x1d0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd fb16 	bl	8001430 <HAL_InitTick>
 8003e04:	2300      	movs	r3, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40022000 	.word	0x40022000
 8003e14:	40021000 	.word	0x40021000
 8003e18:	08005694 	.word	0x08005694
 8003e1c:	20000028 	.word	0x20000028
 8003e20:	2000002c 	.word	0x2000002c

08003e24 <HAL_RCC_GetSysClockFreq>:
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	2300      	movs	r3, #0
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d002      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x30>
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0x36>
 8003e52:	e027      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x80>
 8003e54:	4b19      	ldr	r3, [pc, #100]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	e027      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x86>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	0c9b      	lsrs	r3, r3, #18
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	4a17      	ldr	r2, [pc, #92]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e64:	5cd3      	ldrb	r3, [r2, r3]
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d010      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0x70>
 8003e72:	4b11      	ldr	r3, [pc, #68]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	0c5b      	lsrs	r3, r3, #17
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	4a11      	ldr	r2, [pc, #68]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e7e:	5cd3      	ldrb	r3, [r2, r3]
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a0d      	ldr	r2, [pc, #52]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8003e86:	fb03 f202 	mul.w	r2, r3, r2
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	e004      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x7a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a0c      	ldr	r2, [pc, #48]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e98:	fb02 f303 	mul.w	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e002      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x86>
 8003ea4:	4b05      	ldr	r3, [pc, #20]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	bf00      	nop
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4618      	mov	r0, r3
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	007a1200 	.word	0x007a1200
 8003ec0:	080056ac 	.word	0x080056ac
 8003ec4:	080056bc 	.word	0x080056bc
 8003ec8:	003d0900 	.word	0x003d0900

08003ecc <HAL_RCC_GetHCLKFreq>:
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	4b02      	ldr	r3, [pc, #8]	@ (8003edc <HAL_RCC_GetHCLKFreq+0x10>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	20000028 	.word	0x20000028

08003ee0 <HAL_RCC_GetPCLK1Freq>:
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	f7ff fff2 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4903      	ldr	r1, [pc, #12]	@ (8003f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000
 8003f04:	080056a4 	.word	0x080056a4

08003f08 <HAL_RCC_GetPCLK2Freq>:
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	f7ff ffde 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	0adb      	lsrs	r3, r3, #11
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	4903      	ldr	r1, [pc, #12]	@ (8003f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f1e:	5ccb      	ldrb	r3, [r1, r3]
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	080056a4 	.word	0x080056a4

08003f30 <RCC_Delay>:
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	4b0a      	ldr	r3, [pc, #40]	@ (8003f64 <RCC_Delay+0x34>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f68 <RCC_Delay+0x38>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	0a5b      	lsrs	r3, r3, #9
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	bf00      	nop
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1e5a      	subs	r2, r3, #1
 8003f52:	60fa      	str	r2, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f9      	bne.n	8003f4c <RCC_Delay+0x1c>
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	20000028 	.word	0x20000028
 8003f68:	10624dd3 	.word	0x10624dd3

08003f6c <HAL_TIM_Base_Init>:
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_Base_Init+0x12>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e041      	b.n	8004002 <HAL_TIM_Base_Init+0x96>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_TIM_Base_Init+0x2c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fd f846 	bl	8001024 <HAL_TIM_Base_MspInit>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f000 fa12 	bl	80043d4 <TIM_Base_SetConfig>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004000:	2300      	movs	r3, #0
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_TIM_IRQHandler>:
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <HAL_TIM_IRQHandler+0x64>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01b      	beq.n	800406e <HAL_TIM_IRQHandler+0x64>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f06f 0202 	mvn.w	r2, #2
 800403e:	611a      	str	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	771a      	strb	r2, [r3, #28]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_TIM_IRQHandler+0x52>
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f9a1 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 800405a:	e005      	b.n	8004068 <HAL_TIM_IRQHandler+0x5e>
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f994 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f9a3 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	771a      	strb	r2, [r3, #28]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_TIM_IRQHandler+0xb0>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01b      	beq.n	80040ba <HAL_TIM_IRQHandler+0xb0>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f06f 0204 	mvn.w	r2, #4
 800408a:	611a      	str	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	771a      	strb	r2, [r3, #28]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x9e>
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f97b 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 80040a6:	e005      	b.n	80040b4 <HAL_TIM_IRQHandler+0xaa>
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f96e 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f97d 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	771a      	strb	r2, [r3, #28]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_TIM_IRQHandler+0xfc>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01b      	beq.n	8004106 <HAL_TIM_IRQHandler+0xfc>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f06f 0208 	mvn.w	r2, #8
 80040d6:	611a      	str	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2204      	movs	r2, #4
 80040dc:	771a      	strb	r2, [r3, #28]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_TIM_IRQHandler+0xea>
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f955 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 80040f2:	e005      	b.n	8004100 <HAL_TIM_IRQHandler+0xf6>
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f948 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f957 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	771a      	strb	r2, [r3, #28]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_TIM_IRQHandler+0x148>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01b      	beq.n	8004152 <HAL_TIM_IRQHandler+0x148>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f06f 0210 	mvn.w	r2, #16
 8004122:	611a      	str	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2208      	movs	r2, #8
 8004128:	771a      	strb	r2, [r3, #28]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_TIM_IRQHandler+0x136>
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f92f 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 800413e:	e005      	b.n	800414c <HAL_TIM_IRQHandler+0x142>
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f922 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f931 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	771a      	strb	r2, [r3, #28]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00c      	beq.n	8004176 <HAL_TIM_IRQHandler+0x16c>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <HAL_TIM_IRQHandler+0x16c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0201 	mvn.w	r2, #1
 800416e:	611a      	str	r2, [r3, #16]
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f901 	bl	8004378 <HAL_TIM_PeriodElapsedCallback>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00c      	beq.n	800419a <HAL_TIM_IRQHandler+0x190>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <HAL_TIM_IRQHandler+0x190>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004192:	611a      	str	r2, [r3, #16]
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fa88 	bl	80046aa <HAL_TIMEx_BreakCallback>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00c      	beq.n	80041be <HAL_TIM_IRQHandler+0x1b4>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <HAL_TIM_IRQHandler+0x1b4>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041b6:	611a      	str	r2, [r3, #16]
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f901 	bl	80043c0 <HAL_TIM_TriggerCallback>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00c      	beq.n	80041e2 <HAL_TIM_IRQHandler+0x1d8>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <HAL_TIM_IRQHandler+0x1d8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f06f 0220 	mvn.w	r2, #32
 80041da:	611a      	str	r2, [r3, #16]
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fa5b 	bl	8004698 <HAL_TIMEx_CommutCallback>
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_TIM_ConfigClockSource>:
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
 80041f4:	2300      	movs	r3, #0
 80041f6:	73fb      	strb	r3, [r7, #15]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_TIM_ConfigClockSource+0x1c>
 8004202:	2302      	movs	r3, #2
 8004204:	e0b4      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x186>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2202      	movs	r2, #2
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800423e:	d03e      	beq.n	80042be <HAL_TIM_ConfigClockSource+0xd4>
 8004240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004244:	f200 8087 	bhi.w	8004356 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800424c:	f000 8086 	beq.w	800435c <HAL_TIM_ConfigClockSource+0x172>
 8004250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004254:	d87f      	bhi.n	8004356 <HAL_TIM_ConfigClockSource+0x16c>
 8004256:	2b70      	cmp	r3, #112	@ 0x70
 8004258:	d01a      	beq.n	8004290 <HAL_TIM_ConfigClockSource+0xa6>
 800425a:	2b70      	cmp	r3, #112	@ 0x70
 800425c:	d87b      	bhi.n	8004356 <HAL_TIM_ConfigClockSource+0x16c>
 800425e:	2b60      	cmp	r3, #96	@ 0x60
 8004260:	d050      	beq.n	8004304 <HAL_TIM_ConfigClockSource+0x11a>
 8004262:	2b60      	cmp	r3, #96	@ 0x60
 8004264:	d877      	bhi.n	8004356 <HAL_TIM_ConfigClockSource+0x16c>
 8004266:	2b50      	cmp	r3, #80	@ 0x50
 8004268:	d03c      	beq.n	80042e4 <HAL_TIM_ConfigClockSource+0xfa>
 800426a:	2b50      	cmp	r3, #80	@ 0x50
 800426c:	d873      	bhi.n	8004356 <HAL_TIM_ConfigClockSource+0x16c>
 800426e:	2b40      	cmp	r3, #64	@ 0x40
 8004270:	d058      	beq.n	8004324 <HAL_TIM_ConfigClockSource+0x13a>
 8004272:	2b40      	cmp	r3, #64	@ 0x40
 8004274:	d86f      	bhi.n	8004356 <HAL_TIM_ConfigClockSource+0x16c>
 8004276:	2b30      	cmp	r3, #48	@ 0x30
 8004278:	d064      	beq.n	8004344 <HAL_TIM_ConfigClockSource+0x15a>
 800427a:	2b30      	cmp	r3, #48	@ 0x30
 800427c:	d86b      	bhi.n	8004356 <HAL_TIM_ConfigClockSource+0x16c>
 800427e:	2b20      	cmp	r3, #32
 8004280:	d060      	beq.n	8004344 <HAL_TIM_ConfigClockSource+0x15a>
 8004282:	2b20      	cmp	r3, #32
 8004284:	d867      	bhi.n	8004356 <HAL_TIM_ConfigClockSource+0x16c>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d05c      	beq.n	8004344 <HAL_TIM_ConfigClockSource+0x15a>
 800428a:	2b10      	cmp	r3, #16
 800428c:	d05a      	beq.n	8004344 <HAL_TIM_ConfigClockSource+0x15a>
 800428e:	e062      	b.n	8004356 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6899      	ldr	r1, [r3, #8]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f000 f97d 	bl	800459e <TIM_ETR_SetConfig>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	e04f      	b.n	800435e <HAL_TIM_ConfigClockSource+0x174>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6899      	ldr	r1, [r3, #8]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f000 f966 	bl	800459e <TIM_ETR_SetConfig>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	e03c      	b.n	800435e <HAL_TIM_ConfigClockSource+0x174>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f000 f8dd 	bl	80044b0 <TIM_TI1_ConfigInputStage>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2150      	movs	r1, #80	@ 0x50
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f934 	bl	800456a <TIM_ITRx_SetConfig>
 8004302:	e02c      	b.n	800435e <HAL_TIM_ConfigClockSource+0x174>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	461a      	mov	r2, r3
 8004312:	f000 f8fb 	bl	800450c <TIM_TI2_ConfigInputStage>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2160      	movs	r1, #96	@ 0x60
 800431c:	4618      	mov	r0, r3
 800431e:	f000 f924 	bl	800456a <TIM_ITRx_SetConfig>
 8004322:	e01c      	b.n	800435e <HAL_TIM_ConfigClockSource+0x174>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	461a      	mov	r2, r3
 8004332:	f000 f8bd 	bl	80044b0 <TIM_TI1_ConfigInputStage>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2140      	movs	r1, #64	@ 0x40
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f914 	bl	800456a <TIM_ITRx_SetConfig>
 8004342:	e00c      	b.n	800435e <HAL_TIM_ConfigClockSource+0x174>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f000 f90b 	bl	800456a <TIM_ITRx_SetConfig>
 8004354:	e003      	b.n	800435e <HAL_TIM_ConfigClockSource+0x174>
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
 800435a:	e000      	b.n	800435e <HAL_TIM_ConfigClockSource+0x174>
 800435c:	bf00      	nop
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_PeriodElapsedCallback>:
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <HAL_TIM_OC_DelayElapsedCallback>:
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <HAL_TIM_IC_CaptureCallback>:
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_PWM_PulseFinishedCallback>:
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_TIM_TriggerCallback>:
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
	...

080043d4 <TIM_Base_SetConfig>:
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a2f      	ldr	r2, [pc, #188]	@ (80044a4 <TIM_Base_SetConfig+0xd0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00b      	beq.n	8004404 <TIM_Base_SetConfig+0x30>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f2:	d007      	beq.n	8004404 <TIM_Base_SetConfig+0x30>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a2c      	ldr	r2, [pc, #176]	@ (80044a8 <TIM_Base_SetConfig+0xd4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_Base_SetConfig+0x30>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a2b      	ldr	r2, [pc, #172]	@ (80044ac <TIM_Base_SetConfig+0xd8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <TIM_Base_SetConfig+0x42>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a22      	ldr	r2, [pc, #136]	@ (80044a4 <TIM_Base_SetConfig+0xd0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00b      	beq.n	8004436 <TIM_Base_SetConfig+0x62>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004424:	d007      	beq.n	8004436 <TIM_Base_SetConfig+0x62>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1f      	ldr	r2, [pc, #124]	@ (80044a8 <TIM_Base_SetConfig+0xd4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <TIM_Base_SetConfig+0x62>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1e      	ldr	r2, [pc, #120]	@ (80044ac <TIM_Base_SetConfig+0xd8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d108      	bne.n	8004448 <TIM_Base_SetConfig+0x74>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	629a      	str	r2, [r3, #40]	@ 0x28
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a0d      	ldr	r2, [pc, #52]	@ (80044a4 <TIM_Base_SetConfig+0xd0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d103      	bne.n	800447c <TIM_Base_SetConfig+0xa8>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	631a      	str	r2, [r3, #48]	@ 0x30
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	615a      	str	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <TIM_Base_SetConfig+0xc6>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f023 0201 	bic.w	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	611a      	str	r2, [r3, #16]
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800

080044b0 <TIM_TI1_ConfigInputStage>:
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f023 0201 	bic.w	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	621a      	str	r2, [r3, #32]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f023 030a 	bic.w	r3, r3, #10
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	619a      	str	r2, [r3, #24]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	621a      	str	r2, [r3, #32]
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <TIM_TI2_ConfigInputStage>:
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0210 	bic.w	r2, r3, #16
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	031b      	lsls	r3, r3, #12
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	619a      	str	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	621a      	str	r2, [r3, #32]
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <TIM_ITRx_SetConfig>:
 800456a:	b480      	push	{r7}
 800456c:	b085      	sub	sp, #20
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	f043 0307 	orr.w	r3, r3, #7
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <TIM_ETR_SetConfig>:
 800459e:	b480      	push	{r7}
 80045a0:	b087      	sub	sp, #28
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	021a      	lsls	r2, r3, #8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <HAL_TIMEx_MasterConfigSynchronization>:
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e046      	b.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a16      	ldr	r2, [pc, #88]	@ (800468c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004640:	d009      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a12      	ldr	r2, [pc, #72]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a10      	ldr	r2, [pc, #64]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10c      	bne.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004680:	2300      	movs	r3, #0
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800

08004698 <HAL_TIMEx_CommutCallback>:
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <HAL_TIMEx_BreakCallback>:
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <HAL_UART_Init>:
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_UART_Init+0x12>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e042      	b.n	8004754 <HAL_UART_Init+0x98>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <HAL_UART_Init+0x2c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc fcee 	bl	80010c4 <HAL_UART_MspInit>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2224      	movs	r2, #36	@ 0x24
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046fe:	60da      	str	r2, [r3, #12]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f971 	bl	80049e8 <UART_SetConfig>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004714:	611a      	str	r2, [r3, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004724:	615a      	str	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	645a      	str	r2, [r3, #68]	@ 0x44
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	635a      	str	r2, [r3, #52]	@ 0x34
 8004752:	2300      	movs	r3, #0
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_UART_Transmit>:
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	@ 0x28
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	80fb      	strh	r3, [r7, #6]
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b20      	cmp	r3, #32
 800477a:	d175      	bne.n	8004868 <HAL_UART_Transmit+0x10c>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_UART_Transmit+0x2c>
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_UART_Transmit+0x30>
 8004788:	2301      	movs	r3, #1
 800478a:	e06e      	b.n	800486a <HAL_UART_Transmit+0x10e>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	645a      	str	r2, [r3, #68]	@ 0x44
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2221      	movs	r2, #33	@ 0x21
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800479a:	f7fc fe8b 	bl	80014b4 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	88fa      	ldrh	r2, [r7, #6]
 80047aa:	84da      	strh	r2, [r3, #38]	@ 0x26
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b4:	d108      	bne.n	80047c8 <HAL_UART_Transmit+0x6c>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d104      	bne.n	80047c8 <HAL_UART_Transmit+0x6c>
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e003      	b.n	80047d0 <HAL_UART_Transmit+0x74>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	61fb      	str	r3, [r7, #28]
 80047cc:	2300      	movs	r3, #0
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e02e      	b.n	8004830 <HAL_UART_Transmit+0xd4>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2200      	movs	r2, #0
 80047da:	2180      	movs	r1, #128	@ 0x80
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f848 	bl	8004872 <UART_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_UART_Transmit+0x98>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047f0:	2303      	movs	r3, #3
 80047f2:	e03a      	b.n	800486a <HAL_UART_Transmit+0x10e>
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <HAL_UART_Transmit+0xb6>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	3302      	adds	r3, #2
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	e007      	b.n	8004822 <HAL_UART_Transmit+0xc6>
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	781a      	ldrb	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1cb      	bne.n	80047d2 <HAL_UART_Transmit+0x76>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2200      	movs	r2, #0
 8004842:	2140      	movs	r1, #64	@ 0x40
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f814 	bl	8004872 <UART_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_UART_Transmit+0x100>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004858:	2303      	movs	r3, #3
 800485a:	e006      	b.n	800486a <HAL_UART_Transmit+0x10e>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004864:	2300      	movs	r3, #0
 8004866:	e000      	b.n	800486a <HAL_UART_Transmit+0x10e>
 8004868:	2302      	movs	r3, #2
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <UART_WaitOnFlagUntilTimeout>:
 8004872:	b580      	push	{r7, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	71fb      	strb	r3, [r7, #7]
 8004882:	e03b      	b.n	80048fc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d037      	beq.n	80048fc <UART_WaitOnFlagUntilTimeout+0x8a>
 800488c:	f7fc fe12 	bl	80014b4 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	6a3a      	ldr	r2, [r7, #32]
 8004898:	429a      	cmp	r2, r3
 800489a:	d302      	bcc.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x34>
 80048a2:	2303      	movs	r3, #3
 80048a4:	e03a      	b.n	800491c <UART_WaitOnFlagUntilTimeout+0xaa>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d023      	beq.n	80048fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b80      	cmp	r3, #128	@ 0x80
 80048b8:	d020      	beq.n	80048fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b40      	cmp	r3, #64	@ 0x40
 80048be:	d01d      	beq.n	80048fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d116      	bne.n	80048fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f81d 	bl	8004924 <UART_EndRxTransfer>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2208      	movs	r2, #8
 80048ee:	645a      	str	r2, [r3, #68]	@ 0x44
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048f8:	2301      	movs	r3, #1
 80048fa:	e00f      	b.n	800491c <UART_WaitOnFlagUntilTimeout+0xaa>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4013      	ands	r3, r2
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	429a      	cmp	r2, r3
 800490a:	bf0c      	ite	eq
 800490c:	2301      	moveq	r3, #1
 800490e:	2300      	movne	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	429a      	cmp	r2, r3
 8004918:	d0b4      	beq.n	8004884 <UART_WaitOnFlagUntilTimeout+0x12>
 800491a:	2300      	movs	r3, #0
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_EndRxTransfer>:
 8004924:	b480      	push	{r7}
 8004926:	b095      	sub	sp, #84	@ 0x54
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	637b      	str	r3, [r7, #52]	@ 0x34
 8004934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	633b      	str	r3, [r7, #48]	@ 0x30
 800493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800494c:	643a      	str	r2, [r7, #64]	@ 0x40
 800494e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004950:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004952:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	63bb      	str	r3, [r7, #56]	@ 0x38
 800495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_EndRxTransfer+0x8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3314      	adds	r3, #20
 8004966:	623b      	str	r3, [r7, #32]
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004980:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004982:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e5      	bne.n	8004960 <UART_EndRxTransfer+0x3c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004998:	2b01      	cmp	r3, #1
 800499a:	d119      	bne.n	80049d0 <UART_EndRxTransfer+0xac>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f023 0310 	bic.w	r3, r3, #16
 80049b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049bc:	61ba      	str	r2, [r7, #24]
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	6979      	ldr	r1, [r7, #20]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_EndRxTransfer+0x78>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80049de:	bf00      	nop
 80049e0:	3754      	adds	r7, #84	@ 0x54
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <UART_SetConfig>:
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	611a      	str	r2, [r3, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a22:	f023 030c 	bic.w	r3, r3, #12
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	60d3      	str	r3, [r2, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	615a      	str	r2, [r3, #20]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004afc <UART_SetConfig+0x114>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d103      	bne.n	8004a58 <UART_SetConfig+0x70>
 8004a50:	f7ff fa5a 	bl	8003f08 <HAL_RCC_GetPCLK2Freq>
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	e002      	b.n	8004a5e <UART_SetConfig+0x76>
 8004a58:	f7ff fa42 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009a      	lsls	r2, r3, #2
 8004a68:	441a      	add	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	4a22      	ldr	r2, [pc, #136]	@ (8004b00 <UART_SetConfig+0x118>)
 8004a76:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	0119      	lsls	r1, r3, #4
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009a      	lsls	r2, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a94:	4b1a      	ldr	r3, [pc, #104]	@ (8004b00 <UART_SetConfig+0x118>)
 8004a96:	fba3 0302 	umull	r0, r3, r3, r2
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	2064      	movs	r0, #100	@ 0x64
 8004a9e:	fb00 f303 	mul.w	r3, r0, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	3332      	adds	r3, #50	@ 0x32
 8004aa8:	4a15      	ldr	r2, [pc, #84]	@ (8004b00 <UART_SetConfig+0x118>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ab4:	4419      	add	r1, r3
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	009a      	lsls	r2, r3, #2
 8004ac0:	441a      	add	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004acc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <UART_SetConfig+0x118>)
 8004ace:	fba3 0302 	umull	r0, r3, r3, r2
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	2064      	movs	r0, #100	@ 0x64
 8004ad6:	fb00 f303 	mul.w	r3, r0, r3
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	3332      	adds	r3, #50	@ 0x32
 8004ae0:	4a07      	ldr	r2, [pc, #28]	@ (8004b00 <UART_SetConfig+0x118>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	f003 020f 	and.w	r2, r3, #15
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	440a      	add	r2, r1
 8004af2:	609a      	str	r2, [r3, #8]
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40013800 	.word	0x40013800
 8004b00:	51eb851f 	.word	0x51eb851f

08004b04 <siprintf>:
 8004b04:	b40e      	push	{r1, r2, r3}
 8004b06:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b0a:	b500      	push	{lr}
 8004b0c:	b09c      	sub	sp, #112	@ 0x70
 8004b0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b10:	9002      	str	r0, [sp, #8]
 8004b12:	9006      	str	r0, [sp, #24]
 8004b14:	9107      	str	r1, [sp, #28]
 8004b16:	9104      	str	r1, [sp, #16]
 8004b18:	4808      	ldr	r0, [pc, #32]	@ (8004b3c <siprintf+0x38>)
 8004b1a:	4909      	ldr	r1, [pc, #36]	@ (8004b40 <siprintf+0x3c>)
 8004b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b20:	9105      	str	r1, [sp, #20]
 8004b22:	6800      	ldr	r0, [r0, #0]
 8004b24:	a902      	add	r1, sp, #8
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	f000 f9a0 	bl	8004e6c <_svfiprintf_r>
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	9b02      	ldr	r3, [sp, #8]
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	b01c      	add	sp, #112	@ 0x70
 8004b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b38:	b003      	add	sp, #12
 8004b3a:	4770      	bx	lr
 8004b3c:	20000034 	.word	0x20000034
 8004b40:	ffff0208 	.word	0xffff0208

08004b44 <memset>:
 8004b44:	4603      	mov	r3, r0
 8004b46:	4402      	add	r2, r0
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d100      	bne.n	8004b4e <memset+0xa>
 8004b4c:	4770      	bx	lr
 8004b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b52:	e7f9      	b.n	8004b48 <memset+0x4>

08004b54 <__errno>:
 8004b54:	4b01      	ldr	r3, [pc, #4]	@ (8004b5c <__errno+0x8>)
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000034 	.word	0x20000034

08004b60 <__libc_init_array>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	2600      	movs	r6, #0
 8004b64:	4d0c      	ldr	r5, [pc, #48]	@ (8004b98 <__libc_init_array+0x38>)
 8004b66:	4c0d      	ldr	r4, [pc, #52]	@ (8004b9c <__libc_init_array+0x3c>)
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	42a6      	cmp	r6, r4
 8004b6e:	d109      	bne.n	8004b84 <__libc_init_array+0x24>
 8004b70:	f000 fc78 	bl	8005464 <_init>
 8004b74:	2600      	movs	r6, #0
 8004b76:	4d0a      	ldr	r5, [pc, #40]	@ (8004ba0 <__libc_init_array+0x40>)
 8004b78:	4c0a      	ldr	r4, [pc, #40]	@ (8004ba4 <__libc_init_array+0x44>)
 8004b7a:	1b64      	subs	r4, r4, r5
 8004b7c:	10a4      	asrs	r4, r4, #2
 8004b7e:	42a6      	cmp	r6, r4
 8004b80:	d105      	bne.n	8004b8e <__libc_init_array+0x2e>
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b88:	4798      	blx	r3
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	e7ee      	b.n	8004b6c <__libc_init_array+0xc>
 8004b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b92:	4798      	blx	r3
 8004b94:	3601      	adds	r6, #1
 8004b96:	e7f2      	b.n	8004b7e <__libc_init_array+0x1e>
 8004b98:	080056fc 	.word	0x080056fc
 8004b9c:	080056fc 	.word	0x080056fc
 8004ba0:	080056fc 	.word	0x080056fc
 8004ba4:	08005700 	.word	0x08005700

08004ba8 <__retarget_lock_acquire_recursive>:
 8004ba8:	4770      	bx	lr

08004baa <__retarget_lock_release_recursive>:
 8004baa:	4770      	bx	lr

08004bac <memcpy>:
 8004bac:	440a      	add	r2, r1
 8004bae:	4291      	cmp	r1, r2
 8004bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bb4:	d100      	bne.n	8004bb8 <memcpy+0xc>
 8004bb6:	4770      	bx	lr
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bbe:	4291      	cmp	r1, r2
 8004bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bc4:	d1f9      	bne.n	8004bba <memcpy+0xe>
 8004bc6:	bd10      	pop	{r4, pc}

08004bc8 <_free_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4605      	mov	r5, r0
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	d040      	beq.n	8004c52 <_free_r+0x8a>
 8004bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd4:	1f0c      	subs	r4, r1, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bfb8      	it	lt
 8004bda:	18e4      	addlt	r4, r4, r3
 8004bdc:	f000 f8de 	bl	8004d9c <__malloc_lock>
 8004be0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c54 <_free_r+0x8c>)
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	b933      	cbnz	r3, 8004bf4 <_free_r+0x2c>
 8004be6:	6063      	str	r3, [r4, #4]
 8004be8:	6014      	str	r4, [r2, #0]
 8004bea:	4628      	mov	r0, r5
 8004bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf0:	f000 b8da 	b.w	8004da8 <__malloc_unlock>
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	d908      	bls.n	8004c0a <_free_r+0x42>
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	1821      	adds	r1, r4, r0
 8004bfc:	428b      	cmp	r3, r1
 8004bfe:	bf01      	itttt	eq
 8004c00:	6819      	ldreq	r1, [r3, #0]
 8004c02:	685b      	ldreq	r3, [r3, #4]
 8004c04:	1809      	addeq	r1, r1, r0
 8004c06:	6021      	streq	r1, [r4, #0]
 8004c08:	e7ed      	b.n	8004be6 <_free_r+0x1e>
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	b10b      	cbz	r3, 8004c14 <_free_r+0x4c>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d9fa      	bls.n	8004c0a <_free_r+0x42>
 8004c14:	6811      	ldr	r1, [r2, #0]
 8004c16:	1850      	adds	r0, r2, r1
 8004c18:	42a0      	cmp	r0, r4
 8004c1a:	d10b      	bne.n	8004c34 <_free_r+0x6c>
 8004c1c:	6820      	ldr	r0, [r4, #0]
 8004c1e:	4401      	add	r1, r0
 8004c20:	1850      	adds	r0, r2, r1
 8004c22:	4283      	cmp	r3, r0
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	d1e0      	bne.n	8004bea <_free_r+0x22>
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4408      	add	r0, r1
 8004c2e:	6010      	str	r0, [r2, #0]
 8004c30:	6053      	str	r3, [r2, #4]
 8004c32:	e7da      	b.n	8004bea <_free_r+0x22>
 8004c34:	d902      	bls.n	8004c3c <_free_r+0x74>
 8004c36:	230c      	movs	r3, #12
 8004c38:	602b      	str	r3, [r5, #0]
 8004c3a:	e7d6      	b.n	8004bea <_free_r+0x22>
 8004c3c:	6820      	ldr	r0, [r4, #0]
 8004c3e:	1821      	adds	r1, r4, r0
 8004c40:	428b      	cmp	r3, r1
 8004c42:	bf01      	itttt	eq
 8004c44:	6819      	ldreq	r1, [r3, #0]
 8004c46:	685b      	ldreq	r3, [r3, #4]
 8004c48:	1809      	addeq	r1, r1, r0
 8004c4a:	6021      	streq	r1, [r4, #0]
 8004c4c:	6063      	str	r3, [r4, #4]
 8004c4e:	6054      	str	r4, [r2, #4]
 8004c50:	e7cb      	b.n	8004bea <_free_r+0x22>
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	2000051c 	.word	0x2000051c

08004c58 <sbrk_aligned>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8004c98 <sbrk_aligned+0x40>)
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	6831      	ldr	r1, [r6, #0]
 8004c60:	4605      	mov	r5, r0
 8004c62:	b911      	cbnz	r1, 8004c6a <sbrk_aligned+0x12>
 8004c64:	f000 fbaa 	bl	80053bc <_sbrk_r>
 8004c68:	6030      	str	r0, [r6, #0]
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f000 fba5 	bl	80053bc <_sbrk_r>
 8004c72:	1c43      	adds	r3, r0, #1
 8004c74:	d103      	bne.n	8004c7e <sbrk_aligned+0x26>
 8004c76:	f04f 34ff 	mov.w	r4, #4294967295
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	bd70      	pop	{r4, r5, r6, pc}
 8004c7e:	1cc4      	adds	r4, r0, #3
 8004c80:	f024 0403 	bic.w	r4, r4, #3
 8004c84:	42a0      	cmp	r0, r4
 8004c86:	d0f8      	beq.n	8004c7a <sbrk_aligned+0x22>
 8004c88:	1a21      	subs	r1, r4, r0
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f000 fb96 	bl	80053bc <_sbrk_r>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d1f2      	bne.n	8004c7a <sbrk_aligned+0x22>
 8004c94:	e7ef      	b.n	8004c76 <sbrk_aligned+0x1e>
 8004c96:	bf00      	nop
 8004c98:	20000518 	.word	0x20000518

08004c9c <_malloc_r>:
 8004c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca0:	1ccd      	adds	r5, r1, #3
 8004ca2:	f025 0503 	bic.w	r5, r5, #3
 8004ca6:	3508      	adds	r5, #8
 8004ca8:	2d0c      	cmp	r5, #12
 8004caa:	bf38      	it	cc
 8004cac:	250c      	movcc	r5, #12
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	db01      	blt.n	8004cb8 <_malloc_r+0x1c>
 8004cb4:	42a9      	cmp	r1, r5
 8004cb6:	d904      	bls.n	8004cc2 <_malloc_r+0x26>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	6033      	str	r3, [r6, #0]
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d98 <_malloc_r+0xfc>
 8004cc6:	f000 f869 	bl	8004d9c <__malloc_lock>
 8004cca:	f8d8 3000 	ldr.w	r3, [r8]
 8004cce:	461c      	mov	r4, r3
 8004cd0:	bb44      	cbnz	r4, 8004d24 <_malloc_r+0x88>
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f7ff ffbf 	bl	8004c58 <sbrk_aligned>
 8004cda:	1c43      	adds	r3, r0, #1
 8004cdc:	4604      	mov	r4, r0
 8004cde:	d158      	bne.n	8004d92 <_malloc_r+0xf6>
 8004ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ce4:	4627      	mov	r7, r4
 8004ce6:	2f00      	cmp	r7, #0
 8004ce8:	d143      	bne.n	8004d72 <_malloc_r+0xd6>
 8004cea:	2c00      	cmp	r4, #0
 8004cec:	d04b      	beq.n	8004d86 <_malloc_r+0xea>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	4639      	mov	r1, r7
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	eb04 0903 	add.w	r9, r4, r3
 8004cf8:	f000 fb60 	bl	80053bc <_sbrk_r>
 8004cfc:	4581      	cmp	r9, r0
 8004cfe:	d142      	bne.n	8004d86 <_malloc_r+0xea>
 8004d00:	6821      	ldr	r1, [r4, #0]
 8004d02:	4630      	mov	r0, r6
 8004d04:	1a6d      	subs	r5, r5, r1
 8004d06:	4629      	mov	r1, r5
 8004d08:	f7ff ffa6 	bl	8004c58 <sbrk_aligned>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d03a      	beq.n	8004d86 <_malloc_r+0xea>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	442b      	add	r3, r5
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	f8d8 3000 	ldr.w	r3, [r8]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	bb62      	cbnz	r2, 8004d78 <_malloc_r+0xdc>
 8004d1e:	f8c8 7000 	str.w	r7, [r8]
 8004d22:	e00f      	b.n	8004d44 <_malloc_r+0xa8>
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	1b52      	subs	r2, r2, r5
 8004d28:	d420      	bmi.n	8004d6c <_malloc_r+0xd0>
 8004d2a:	2a0b      	cmp	r2, #11
 8004d2c:	d917      	bls.n	8004d5e <_malloc_r+0xc2>
 8004d2e:	1961      	adds	r1, r4, r5
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	6025      	str	r5, [r4, #0]
 8004d34:	bf18      	it	ne
 8004d36:	6059      	strne	r1, [r3, #4]
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	bf08      	it	eq
 8004d3c:	f8c8 1000 	streq.w	r1, [r8]
 8004d40:	5162      	str	r2, [r4, r5]
 8004d42:	604b      	str	r3, [r1, #4]
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 f82f 	bl	8004da8 <__malloc_unlock>
 8004d4a:	f104 000b 	add.w	r0, r4, #11
 8004d4e:	1d23      	adds	r3, r4, #4
 8004d50:	f020 0007 	bic.w	r0, r0, #7
 8004d54:	1ac2      	subs	r2, r0, r3
 8004d56:	bf1c      	itt	ne
 8004d58:	1a1b      	subne	r3, r3, r0
 8004d5a:	50a3      	strne	r3, [r4, r2]
 8004d5c:	e7af      	b.n	8004cbe <_malloc_r+0x22>
 8004d5e:	6862      	ldr	r2, [r4, #4]
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	bf0c      	ite	eq
 8004d64:	f8c8 2000 	streq.w	r2, [r8]
 8004d68:	605a      	strne	r2, [r3, #4]
 8004d6a:	e7eb      	b.n	8004d44 <_malloc_r+0xa8>
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	6864      	ldr	r4, [r4, #4]
 8004d70:	e7ae      	b.n	8004cd0 <_malloc_r+0x34>
 8004d72:	463c      	mov	r4, r7
 8004d74:	687f      	ldr	r7, [r7, #4]
 8004d76:	e7b6      	b.n	8004ce6 <_malloc_r+0x4a>
 8004d78:	461a      	mov	r2, r3
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	42a3      	cmp	r3, r4
 8004d7e:	d1fb      	bne.n	8004d78 <_malloc_r+0xdc>
 8004d80:	2300      	movs	r3, #0
 8004d82:	6053      	str	r3, [r2, #4]
 8004d84:	e7de      	b.n	8004d44 <_malloc_r+0xa8>
 8004d86:	230c      	movs	r3, #12
 8004d88:	4630      	mov	r0, r6
 8004d8a:	6033      	str	r3, [r6, #0]
 8004d8c:	f000 f80c 	bl	8004da8 <__malloc_unlock>
 8004d90:	e794      	b.n	8004cbc <_malloc_r+0x20>
 8004d92:	6005      	str	r5, [r0, #0]
 8004d94:	e7d6      	b.n	8004d44 <_malloc_r+0xa8>
 8004d96:	bf00      	nop
 8004d98:	2000051c 	.word	0x2000051c

08004d9c <__malloc_lock>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	@ (8004da4 <__malloc_lock+0x8>)
 8004d9e:	f7ff bf03 	b.w	8004ba8 <__retarget_lock_acquire_recursive>
 8004da2:	bf00      	nop
 8004da4:	20000514 	.word	0x20000514

08004da8 <__malloc_unlock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	@ (8004db0 <__malloc_unlock+0x8>)
 8004daa:	f7ff befe 	b.w	8004baa <__retarget_lock_release_recursive>
 8004dae:	bf00      	nop
 8004db0:	20000514 	.word	0x20000514

08004db4 <__ssputs_r>:
 8004db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db8:	461f      	mov	r7, r3
 8004dba:	688e      	ldr	r6, [r1, #8]
 8004dbc:	4682      	mov	sl, r0
 8004dbe:	42be      	cmp	r6, r7
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	4690      	mov	r8, r2
 8004dc4:	680b      	ldr	r3, [r1, #0]
 8004dc6:	d82d      	bhi.n	8004e24 <__ssputs_r+0x70>
 8004dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004dd0:	d026      	beq.n	8004e20 <__ssputs_r+0x6c>
 8004dd2:	6965      	ldr	r5, [r4, #20]
 8004dd4:	6909      	ldr	r1, [r1, #16]
 8004dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dda:	eba3 0901 	sub.w	r9, r3, r1
 8004dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004de2:	1c7b      	adds	r3, r7, #1
 8004de4:	444b      	add	r3, r9
 8004de6:	106d      	asrs	r5, r5, #1
 8004de8:	429d      	cmp	r5, r3
 8004dea:	bf38      	it	cc
 8004dec:	461d      	movcc	r5, r3
 8004dee:	0553      	lsls	r3, r2, #21
 8004df0:	d527      	bpl.n	8004e42 <__ssputs_r+0x8e>
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7ff ff52 	bl	8004c9c <_malloc_r>
 8004df8:	4606      	mov	r6, r0
 8004dfa:	b360      	cbz	r0, 8004e56 <__ssputs_r+0xa2>
 8004dfc:	464a      	mov	r2, r9
 8004dfe:	6921      	ldr	r1, [r4, #16]
 8004e00:	f7ff fed4 	bl	8004bac <memcpy>
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	6126      	str	r6, [r4, #16]
 8004e12:	444e      	add	r6, r9
 8004e14:	6026      	str	r6, [r4, #0]
 8004e16:	463e      	mov	r6, r7
 8004e18:	6165      	str	r5, [r4, #20]
 8004e1a:	eba5 0509 	sub.w	r5, r5, r9
 8004e1e:	60a5      	str	r5, [r4, #8]
 8004e20:	42be      	cmp	r6, r7
 8004e22:	d900      	bls.n	8004e26 <__ssputs_r+0x72>
 8004e24:	463e      	mov	r6, r7
 8004e26:	4632      	mov	r2, r6
 8004e28:	4641      	mov	r1, r8
 8004e2a:	6820      	ldr	r0, [r4, #0]
 8004e2c:	f000 faac 	bl	8005388 <memmove>
 8004e30:	2000      	movs	r0, #0
 8004e32:	68a3      	ldr	r3, [r4, #8]
 8004e34:	1b9b      	subs	r3, r3, r6
 8004e36:	60a3      	str	r3, [r4, #8]
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	4433      	add	r3, r6
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e42:	462a      	mov	r2, r5
 8004e44:	f000 fad8 	bl	80053f8 <_realloc_r>
 8004e48:	4606      	mov	r6, r0
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d1e0      	bne.n	8004e10 <__ssputs_r+0x5c>
 8004e4e:	4650      	mov	r0, sl
 8004e50:	6921      	ldr	r1, [r4, #16]
 8004e52:	f7ff feb9 	bl	8004bc8 <_free_r>
 8004e56:	230c      	movs	r3, #12
 8004e58:	f8ca 3000 	str.w	r3, [sl]
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e66:	81a3      	strh	r3, [r4, #12]
 8004e68:	e7e9      	b.n	8004e3e <__ssputs_r+0x8a>
	...

08004e6c <_svfiprintf_r>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	4698      	mov	r8, r3
 8004e72:	898b      	ldrh	r3, [r1, #12]
 8004e74:	4607      	mov	r7, r0
 8004e76:	061b      	lsls	r3, r3, #24
 8004e78:	460d      	mov	r5, r1
 8004e7a:	4614      	mov	r4, r2
 8004e7c:	b09d      	sub	sp, #116	@ 0x74
 8004e7e:	d510      	bpl.n	8004ea2 <_svfiprintf_r+0x36>
 8004e80:	690b      	ldr	r3, [r1, #16]
 8004e82:	b973      	cbnz	r3, 8004ea2 <_svfiprintf_r+0x36>
 8004e84:	2140      	movs	r1, #64	@ 0x40
 8004e86:	f7ff ff09 	bl	8004c9c <_malloc_r>
 8004e8a:	6028      	str	r0, [r5, #0]
 8004e8c:	6128      	str	r0, [r5, #16]
 8004e8e:	b930      	cbnz	r0, 8004e9e <_svfiprintf_r+0x32>
 8004e90:	230c      	movs	r3, #12
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	b01d      	add	sp, #116	@ 0x74
 8004e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9e:	2340      	movs	r3, #64	@ 0x40
 8004ea0:	616b      	str	r3, [r5, #20]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004eac:	2330      	movs	r3, #48	@ 0x30
 8004eae:	f04f 0901 	mov.w	r9, #1
 8004eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eb6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005050 <_svfiprintf_r+0x1e4>
 8004eba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	469a      	mov	sl, r3
 8004ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ec6:	b10a      	cbz	r2, 8004ecc <_svfiprintf_r+0x60>
 8004ec8:	2a25      	cmp	r2, #37	@ 0x25
 8004eca:	d1f9      	bne.n	8004ec0 <_svfiprintf_r+0x54>
 8004ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ed0:	d00b      	beq.n	8004eea <_svfiprintf_r+0x7e>
 8004ed2:	465b      	mov	r3, fp
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f7ff ff6b 	bl	8004db4 <__ssputs_r>
 8004ede:	3001      	adds	r0, #1
 8004ee0:	f000 80a7 	beq.w	8005032 <_svfiprintf_r+0x1c6>
 8004ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ee6:	445a      	add	r2, fp
 8004ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004eea:	f89a 3000 	ldrb.w	r3, [sl]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 809f 	beq.w	8005032 <_svfiprintf_r+0x1c6>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8004efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004efe:	f10a 0a01 	add.w	sl, sl, #1
 8004f02:	9304      	str	r3, [sp, #16]
 8004f04:	9307      	str	r3, [sp, #28]
 8004f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f0c:	4654      	mov	r4, sl
 8004f0e:	2205      	movs	r2, #5
 8004f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f14:	484e      	ldr	r0, [pc, #312]	@ (8005050 <_svfiprintf_r+0x1e4>)
 8004f16:	f000 fa61 	bl	80053dc <memchr>
 8004f1a:	9a04      	ldr	r2, [sp, #16]
 8004f1c:	b9d8      	cbnz	r0, 8004f56 <_svfiprintf_r+0xea>
 8004f1e:	06d0      	lsls	r0, r2, #27
 8004f20:	bf44      	itt	mi
 8004f22:	2320      	movmi	r3, #32
 8004f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f28:	0711      	lsls	r1, r2, #28
 8004f2a:	bf44      	itt	mi
 8004f2c:	232b      	movmi	r3, #43	@ 0x2b
 8004f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f32:	f89a 3000 	ldrb.w	r3, [sl]
 8004f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f38:	d015      	beq.n	8004f66 <_svfiprintf_r+0xfa>
 8004f3a:	4654      	mov	r4, sl
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f04f 0c0a 	mov.w	ip, #10
 8004f42:	9a07      	ldr	r2, [sp, #28]
 8004f44:	4621      	mov	r1, r4
 8004f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f4a:	3b30      	subs	r3, #48	@ 0x30
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	d94b      	bls.n	8004fe8 <_svfiprintf_r+0x17c>
 8004f50:	b1b0      	cbz	r0, 8004f80 <_svfiprintf_r+0x114>
 8004f52:	9207      	str	r2, [sp, #28]
 8004f54:	e014      	b.n	8004f80 <_svfiprintf_r+0x114>
 8004f56:	eba0 0308 	sub.w	r3, r0, r8
 8004f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	46a2      	mov	sl, r4
 8004f62:	9304      	str	r3, [sp, #16]
 8004f64:	e7d2      	b.n	8004f0c <_svfiprintf_r+0xa0>
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	1d19      	adds	r1, r3, #4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	9103      	str	r1, [sp, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfbb      	ittet	lt
 8004f72:	425b      	neglt	r3, r3
 8004f74:	f042 0202 	orrlt.w	r2, r2, #2
 8004f78:	9307      	strge	r3, [sp, #28]
 8004f7a:	9307      	strlt	r3, [sp, #28]
 8004f7c:	bfb8      	it	lt
 8004f7e:	9204      	strlt	r2, [sp, #16]
 8004f80:	7823      	ldrb	r3, [r4, #0]
 8004f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f84:	d10a      	bne.n	8004f9c <_svfiprintf_r+0x130>
 8004f86:	7863      	ldrb	r3, [r4, #1]
 8004f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f8a:	d132      	bne.n	8004ff2 <_svfiprintf_r+0x186>
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	3402      	adds	r4, #2
 8004f90:	1d1a      	adds	r2, r3, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	9203      	str	r2, [sp, #12]
 8004f96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f9a:	9305      	str	r3, [sp, #20]
 8004f9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005054 <_svfiprintf_r+0x1e8>
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	4650      	mov	r0, sl
 8004fa4:	7821      	ldrb	r1, [r4, #0]
 8004fa6:	f000 fa19 	bl	80053dc <memchr>
 8004faa:	b138      	cbz	r0, 8004fbc <_svfiprintf_r+0x150>
 8004fac:	2240      	movs	r2, #64	@ 0x40
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	eba0 000a 	sub.w	r0, r0, sl
 8004fb4:	4082      	lsls	r2, r0
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	3401      	adds	r4, #1
 8004fba:	9304      	str	r3, [sp, #16]
 8004fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc0:	2206      	movs	r2, #6
 8004fc2:	4825      	ldr	r0, [pc, #148]	@ (8005058 <_svfiprintf_r+0x1ec>)
 8004fc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fc8:	f000 fa08 	bl	80053dc <memchr>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d036      	beq.n	800503e <_svfiprintf_r+0x1d2>
 8004fd0:	4b22      	ldr	r3, [pc, #136]	@ (800505c <_svfiprintf_r+0x1f0>)
 8004fd2:	bb1b      	cbnz	r3, 800501c <_svfiprintf_r+0x1b0>
 8004fd4:	9b03      	ldr	r3, [sp, #12]
 8004fd6:	3307      	adds	r3, #7
 8004fd8:	f023 0307 	bic.w	r3, r3, #7
 8004fdc:	3308      	adds	r3, #8
 8004fde:	9303      	str	r3, [sp, #12]
 8004fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe2:	4433      	add	r3, r6
 8004fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe6:	e76a      	b.n	8004ebe <_svfiprintf_r+0x52>
 8004fe8:	460c      	mov	r4, r1
 8004fea:	2001      	movs	r0, #1
 8004fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ff0:	e7a8      	b.n	8004f44 <_svfiprintf_r+0xd8>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f04f 0c0a 	mov.w	ip, #10
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	3401      	adds	r4, #1
 8004ffc:	9305      	str	r3, [sp, #20]
 8004ffe:	4620      	mov	r0, r4
 8005000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005004:	3a30      	subs	r2, #48	@ 0x30
 8005006:	2a09      	cmp	r2, #9
 8005008:	d903      	bls.n	8005012 <_svfiprintf_r+0x1a6>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0c6      	beq.n	8004f9c <_svfiprintf_r+0x130>
 800500e:	9105      	str	r1, [sp, #20]
 8005010:	e7c4      	b.n	8004f9c <_svfiprintf_r+0x130>
 8005012:	4604      	mov	r4, r0
 8005014:	2301      	movs	r3, #1
 8005016:	fb0c 2101 	mla	r1, ip, r1, r2
 800501a:	e7f0      	b.n	8004ffe <_svfiprintf_r+0x192>
 800501c:	ab03      	add	r3, sp, #12
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	462a      	mov	r2, r5
 8005022:	4638      	mov	r0, r7
 8005024:	4b0e      	ldr	r3, [pc, #56]	@ (8005060 <_svfiprintf_r+0x1f4>)
 8005026:	a904      	add	r1, sp, #16
 8005028:	f3af 8000 	nop.w
 800502c:	1c42      	adds	r2, r0, #1
 800502e:	4606      	mov	r6, r0
 8005030:	d1d6      	bne.n	8004fe0 <_svfiprintf_r+0x174>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	065b      	lsls	r3, r3, #25
 8005036:	f53f af2d 	bmi.w	8004e94 <_svfiprintf_r+0x28>
 800503a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800503c:	e72c      	b.n	8004e98 <_svfiprintf_r+0x2c>
 800503e:	ab03      	add	r3, sp, #12
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	462a      	mov	r2, r5
 8005044:	4638      	mov	r0, r7
 8005046:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <_svfiprintf_r+0x1f4>)
 8005048:	a904      	add	r1, sp, #16
 800504a:	f000 f87d 	bl	8005148 <_printf_i>
 800504e:	e7ed      	b.n	800502c <_svfiprintf_r+0x1c0>
 8005050:	080056be 	.word	0x080056be
 8005054:	080056c4 	.word	0x080056c4
 8005058:	080056c8 	.word	0x080056c8
 800505c:	00000000 	.word	0x00000000
 8005060:	08004db5 	.word	0x08004db5

08005064 <_printf_common>:
 8005064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005068:	4616      	mov	r6, r2
 800506a:	4698      	mov	r8, r3
 800506c:	688a      	ldr	r2, [r1, #8]
 800506e:	690b      	ldr	r3, [r1, #16]
 8005070:	4607      	mov	r7, r0
 8005072:	4293      	cmp	r3, r2
 8005074:	bfb8      	it	lt
 8005076:	4613      	movlt	r3, r2
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800507e:	460c      	mov	r4, r1
 8005080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005084:	b10a      	cbz	r2, 800508a <_printf_common+0x26>
 8005086:	3301      	adds	r3, #1
 8005088:	6033      	str	r3, [r6, #0]
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	0699      	lsls	r1, r3, #26
 800508e:	bf42      	ittt	mi
 8005090:	6833      	ldrmi	r3, [r6, #0]
 8005092:	3302      	addmi	r3, #2
 8005094:	6033      	strmi	r3, [r6, #0]
 8005096:	6825      	ldr	r5, [r4, #0]
 8005098:	f015 0506 	ands.w	r5, r5, #6
 800509c:	d106      	bne.n	80050ac <_printf_common+0x48>
 800509e:	f104 0a19 	add.w	sl, r4, #25
 80050a2:	68e3      	ldr	r3, [r4, #12]
 80050a4:	6832      	ldr	r2, [r6, #0]
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	42ab      	cmp	r3, r5
 80050aa:	dc2b      	bgt.n	8005104 <_printf_common+0xa0>
 80050ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050b0:	6822      	ldr	r2, [r4, #0]
 80050b2:	3b00      	subs	r3, #0
 80050b4:	bf18      	it	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	0692      	lsls	r2, r2, #26
 80050ba:	d430      	bmi.n	800511e <_printf_common+0xba>
 80050bc:	4641      	mov	r1, r8
 80050be:	4638      	mov	r0, r7
 80050c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050c4:	47c8      	blx	r9
 80050c6:	3001      	adds	r0, #1
 80050c8:	d023      	beq.n	8005112 <_printf_common+0xae>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	6922      	ldr	r2, [r4, #16]
 80050ce:	f003 0306 	and.w	r3, r3, #6
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	bf14      	ite	ne
 80050d6:	2500      	movne	r5, #0
 80050d8:	6833      	ldreq	r3, [r6, #0]
 80050da:	f04f 0600 	mov.w	r6, #0
 80050de:	bf08      	it	eq
 80050e0:	68e5      	ldreq	r5, [r4, #12]
 80050e2:	f104 041a 	add.w	r4, r4, #26
 80050e6:	bf08      	it	eq
 80050e8:	1aed      	subeq	r5, r5, r3
 80050ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050ee:	bf08      	it	eq
 80050f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f4:	4293      	cmp	r3, r2
 80050f6:	bfc4      	itt	gt
 80050f8:	1a9b      	subgt	r3, r3, r2
 80050fa:	18ed      	addgt	r5, r5, r3
 80050fc:	42b5      	cmp	r5, r6
 80050fe:	d11a      	bne.n	8005136 <_printf_common+0xd2>
 8005100:	2000      	movs	r0, #0
 8005102:	e008      	b.n	8005116 <_printf_common+0xb2>
 8005104:	2301      	movs	r3, #1
 8005106:	4652      	mov	r2, sl
 8005108:	4641      	mov	r1, r8
 800510a:	4638      	mov	r0, r7
 800510c:	47c8      	blx	r9
 800510e:	3001      	adds	r0, #1
 8005110:	d103      	bne.n	800511a <_printf_common+0xb6>
 8005112:	f04f 30ff 	mov.w	r0, #4294967295
 8005116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511a:	3501      	adds	r5, #1
 800511c:	e7c1      	b.n	80050a2 <_printf_common+0x3e>
 800511e:	2030      	movs	r0, #48	@ 0x30
 8005120:	18e1      	adds	r1, r4, r3
 8005122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800512c:	4422      	add	r2, r4
 800512e:	3302      	adds	r3, #2
 8005130:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005134:	e7c2      	b.n	80050bc <_printf_common+0x58>
 8005136:	2301      	movs	r3, #1
 8005138:	4622      	mov	r2, r4
 800513a:	4641      	mov	r1, r8
 800513c:	4638      	mov	r0, r7
 800513e:	47c8      	blx	r9
 8005140:	3001      	adds	r0, #1
 8005142:	d0e6      	beq.n	8005112 <_printf_common+0xae>
 8005144:	3601      	adds	r6, #1
 8005146:	e7d9      	b.n	80050fc <_printf_common+0x98>

08005148 <_printf_i>:
 8005148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800514c:	7e0f      	ldrb	r7, [r1, #24]
 800514e:	4691      	mov	r9, r2
 8005150:	2f78      	cmp	r7, #120	@ 0x78
 8005152:	4680      	mov	r8, r0
 8005154:	460c      	mov	r4, r1
 8005156:	469a      	mov	sl, r3
 8005158:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800515a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800515e:	d807      	bhi.n	8005170 <_printf_i+0x28>
 8005160:	2f62      	cmp	r7, #98	@ 0x62
 8005162:	d80a      	bhi.n	800517a <_printf_i+0x32>
 8005164:	2f00      	cmp	r7, #0
 8005166:	f000 80d3 	beq.w	8005310 <_printf_i+0x1c8>
 800516a:	2f58      	cmp	r7, #88	@ 0x58
 800516c:	f000 80ba 	beq.w	80052e4 <_printf_i+0x19c>
 8005170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005178:	e03a      	b.n	80051f0 <_printf_i+0xa8>
 800517a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800517e:	2b15      	cmp	r3, #21
 8005180:	d8f6      	bhi.n	8005170 <_printf_i+0x28>
 8005182:	a101      	add	r1, pc, #4	@ (adr r1, 8005188 <_printf_i+0x40>)
 8005184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005188:	080051e1 	.word	0x080051e1
 800518c:	080051f5 	.word	0x080051f5
 8005190:	08005171 	.word	0x08005171
 8005194:	08005171 	.word	0x08005171
 8005198:	08005171 	.word	0x08005171
 800519c:	08005171 	.word	0x08005171
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	08005171 	.word	0x08005171
 80051a8:	08005171 	.word	0x08005171
 80051ac:	08005171 	.word	0x08005171
 80051b0:	08005171 	.word	0x08005171
 80051b4:	080052f7 	.word	0x080052f7
 80051b8:	0800521f 	.word	0x0800521f
 80051bc:	080052b1 	.word	0x080052b1
 80051c0:	08005171 	.word	0x08005171
 80051c4:	08005171 	.word	0x08005171
 80051c8:	08005319 	.word	0x08005319
 80051cc:	08005171 	.word	0x08005171
 80051d0:	0800521f 	.word	0x0800521f
 80051d4:	08005171 	.word	0x08005171
 80051d8:	08005171 	.word	0x08005171
 80051dc:	080052b9 	.word	0x080052b9
 80051e0:	6833      	ldr	r3, [r6, #0]
 80051e2:	1d1a      	adds	r2, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6032      	str	r2, [r6, #0]
 80051e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051f0:	2301      	movs	r3, #1
 80051f2:	e09e      	b.n	8005332 <_printf_i+0x1ea>
 80051f4:	6833      	ldr	r3, [r6, #0]
 80051f6:	6820      	ldr	r0, [r4, #0]
 80051f8:	1d19      	adds	r1, r3, #4
 80051fa:	6031      	str	r1, [r6, #0]
 80051fc:	0606      	lsls	r6, r0, #24
 80051fe:	d501      	bpl.n	8005204 <_printf_i+0xbc>
 8005200:	681d      	ldr	r5, [r3, #0]
 8005202:	e003      	b.n	800520c <_printf_i+0xc4>
 8005204:	0645      	lsls	r5, r0, #25
 8005206:	d5fb      	bpl.n	8005200 <_printf_i+0xb8>
 8005208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800520c:	2d00      	cmp	r5, #0
 800520e:	da03      	bge.n	8005218 <_printf_i+0xd0>
 8005210:	232d      	movs	r3, #45	@ 0x2d
 8005212:	426d      	negs	r5, r5
 8005214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005218:	230a      	movs	r3, #10
 800521a:	4859      	ldr	r0, [pc, #356]	@ (8005380 <_printf_i+0x238>)
 800521c:	e011      	b.n	8005242 <_printf_i+0xfa>
 800521e:	6821      	ldr	r1, [r4, #0]
 8005220:	6833      	ldr	r3, [r6, #0]
 8005222:	0608      	lsls	r0, r1, #24
 8005224:	f853 5b04 	ldr.w	r5, [r3], #4
 8005228:	d402      	bmi.n	8005230 <_printf_i+0xe8>
 800522a:	0649      	lsls	r1, r1, #25
 800522c:	bf48      	it	mi
 800522e:	b2ad      	uxthmi	r5, r5
 8005230:	2f6f      	cmp	r7, #111	@ 0x6f
 8005232:	6033      	str	r3, [r6, #0]
 8005234:	bf14      	ite	ne
 8005236:	230a      	movne	r3, #10
 8005238:	2308      	moveq	r3, #8
 800523a:	4851      	ldr	r0, [pc, #324]	@ (8005380 <_printf_i+0x238>)
 800523c:	2100      	movs	r1, #0
 800523e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005242:	6866      	ldr	r6, [r4, #4]
 8005244:	2e00      	cmp	r6, #0
 8005246:	bfa8      	it	ge
 8005248:	6821      	ldrge	r1, [r4, #0]
 800524a:	60a6      	str	r6, [r4, #8]
 800524c:	bfa4      	itt	ge
 800524e:	f021 0104 	bicge.w	r1, r1, #4
 8005252:	6021      	strge	r1, [r4, #0]
 8005254:	b90d      	cbnz	r5, 800525a <_printf_i+0x112>
 8005256:	2e00      	cmp	r6, #0
 8005258:	d04b      	beq.n	80052f2 <_printf_i+0x1aa>
 800525a:	4616      	mov	r6, r2
 800525c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005260:	fb03 5711 	mls	r7, r3, r1, r5
 8005264:	5dc7      	ldrb	r7, [r0, r7]
 8005266:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800526a:	462f      	mov	r7, r5
 800526c:	42bb      	cmp	r3, r7
 800526e:	460d      	mov	r5, r1
 8005270:	d9f4      	bls.n	800525c <_printf_i+0x114>
 8005272:	2b08      	cmp	r3, #8
 8005274:	d10b      	bne.n	800528e <_printf_i+0x146>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	07df      	lsls	r7, r3, #31
 800527a:	d508      	bpl.n	800528e <_printf_i+0x146>
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	6861      	ldr	r1, [r4, #4]
 8005280:	4299      	cmp	r1, r3
 8005282:	bfde      	ittt	le
 8005284:	2330      	movle	r3, #48	@ 0x30
 8005286:	f806 3c01 	strble.w	r3, [r6, #-1]
 800528a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800528e:	1b92      	subs	r2, r2, r6
 8005290:	6122      	str	r2, [r4, #16]
 8005292:	464b      	mov	r3, r9
 8005294:	4621      	mov	r1, r4
 8005296:	4640      	mov	r0, r8
 8005298:	f8cd a000 	str.w	sl, [sp]
 800529c:	aa03      	add	r2, sp, #12
 800529e:	f7ff fee1 	bl	8005064 <_printf_common>
 80052a2:	3001      	adds	r0, #1
 80052a4:	d14a      	bne.n	800533c <_printf_i+0x1f4>
 80052a6:	f04f 30ff 	mov.w	r0, #4294967295
 80052aa:	b004      	add	sp, #16
 80052ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	f043 0320 	orr.w	r3, r3, #32
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	2778      	movs	r7, #120	@ 0x78
 80052ba:	4832      	ldr	r0, [pc, #200]	@ (8005384 <_printf_i+0x23c>)
 80052bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	6831      	ldr	r1, [r6, #0]
 80052c4:	061f      	lsls	r7, r3, #24
 80052c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80052ca:	d402      	bmi.n	80052d2 <_printf_i+0x18a>
 80052cc:	065f      	lsls	r7, r3, #25
 80052ce:	bf48      	it	mi
 80052d0:	b2ad      	uxthmi	r5, r5
 80052d2:	6031      	str	r1, [r6, #0]
 80052d4:	07d9      	lsls	r1, r3, #31
 80052d6:	bf44      	itt	mi
 80052d8:	f043 0320 	orrmi.w	r3, r3, #32
 80052dc:	6023      	strmi	r3, [r4, #0]
 80052de:	b11d      	cbz	r5, 80052e8 <_printf_i+0x1a0>
 80052e0:	2310      	movs	r3, #16
 80052e2:	e7ab      	b.n	800523c <_printf_i+0xf4>
 80052e4:	4826      	ldr	r0, [pc, #152]	@ (8005380 <_printf_i+0x238>)
 80052e6:	e7e9      	b.n	80052bc <_printf_i+0x174>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	f023 0320 	bic.w	r3, r3, #32
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	e7f6      	b.n	80052e0 <_printf_i+0x198>
 80052f2:	4616      	mov	r6, r2
 80052f4:	e7bd      	b.n	8005272 <_printf_i+0x12a>
 80052f6:	6833      	ldr	r3, [r6, #0]
 80052f8:	6825      	ldr	r5, [r4, #0]
 80052fa:	1d18      	adds	r0, r3, #4
 80052fc:	6961      	ldr	r1, [r4, #20]
 80052fe:	6030      	str	r0, [r6, #0]
 8005300:	062e      	lsls	r6, r5, #24
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	d501      	bpl.n	800530a <_printf_i+0x1c2>
 8005306:	6019      	str	r1, [r3, #0]
 8005308:	e002      	b.n	8005310 <_printf_i+0x1c8>
 800530a:	0668      	lsls	r0, r5, #25
 800530c:	d5fb      	bpl.n	8005306 <_printf_i+0x1be>
 800530e:	8019      	strh	r1, [r3, #0]
 8005310:	2300      	movs	r3, #0
 8005312:	4616      	mov	r6, r2
 8005314:	6123      	str	r3, [r4, #16]
 8005316:	e7bc      	b.n	8005292 <_printf_i+0x14a>
 8005318:	6833      	ldr	r3, [r6, #0]
 800531a:	2100      	movs	r1, #0
 800531c:	1d1a      	adds	r2, r3, #4
 800531e:	6032      	str	r2, [r6, #0]
 8005320:	681e      	ldr	r6, [r3, #0]
 8005322:	6862      	ldr	r2, [r4, #4]
 8005324:	4630      	mov	r0, r6
 8005326:	f000 f859 	bl	80053dc <memchr>
 800532a:	b108      	cbz	r0, 8005330 <_printf_i+0x1e8>
 800532c:	1b80      	subs	r0, r0, r6
 800532e:	6060      	str	r0, [r4, #4]
 8005330:	6863      	ldr	r3, [r4, #4]
 8005332:	6123      	str	r3, [r4, #16]
 8005334:	2300      	movs	r3, #0
 8005336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800533a:	e7aa      	b.n	8005292 <_printf_i+0x14a>
 800533c:	4632      	mov	r2, r6
 800533e:	4649      	mov	r1, r9
 8005340:	4640      	mov	r0, r8
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	47d0      	blx	sl
 8005346:	3001      	adds	r0, #1
 8005348:	d0ad      	beq.n	80052a6 <_printf_i+0x15e>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	079b      	lsls	r3, r3, #30
 800534e:	d413      	bmi.n	8005378 <_printf_i+0x230>
 8005350:	68e0      	ldr	r0, [r4, #12]
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	4298      	cmp	r0, r3
 8005356:	bfb8      	it	lt
 8005358:	4618      	movlt	r0, r3
 800535a:	e7a6      	b.n	80052aa <_printf_i+0x162>
 800535c:	2301      	movs	r3, #1
 800535e:	4632      	mov	r2, r6
 8005360:	4649      	mov	r1, r9
 8005362:	4640      	mov	r0, r8
 8005364:	47d0      	blx	sl
 8005366:	3001      	adds	r0, #1
 8005368:	d09d      	beq.n	80052a6 <_printf_i+0x15e>
 800536a:	3501      	adds	r5, #1
 800536c:	68e3      	ldr	r3, [r4, #12]
 800536e:	9903      	ldr	r1, [sp, #12]
 8005370:	1a5b      	subs	r3, r3, r1
 8005372:	42ab      	cmp	r3, r5
 8005374:	dcf2      	bgt.n	800535c <_printf_i+0x214>
 8005376:	e7eb      	b.n	8005350 <_printf_i+0x208>
 8005378:	2500      	movs	r5, #0
 800537a:	f104 0619 	add.w	r6, r4, #25
 800537e:	e7f5      	b.n	800536c <_printf_i+0x224>
 8005380:	080056cf 	.word	0x080056cf
 8005384:	080056e0 	.word	0x080056e0

08005388 <memmove>:
 8005388:	4288      	cmp	r0, r1
 800538a:	b510      	push	{r4, lr}
 800538c:	eb01 0402 	add.w	r4, r1, r2
 8005390:	d902      	bls.n	8005398 <memmove+0x10>
 8005392:	4284      	cmp	r4, r0
 8005394:	4623      	mov	r3, r4
 8005396:	d807      	bhi.n	80053a8 <memmove+0x20>
 8005398:	1e43      	subs	r3, r0, #1
 800539a:	42a1      	cmp	r1, r4
 800539c:	d008      	beq.n	80053b0 <memmove+0x28>
 800539e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053a6:	e7f8      	b.n	800539a <memmove+0x12>
 80053a8:	4601      	mov	r1, r0
 80053aa:	4402      	add	r2, r0
 80053ac:	428a      	cmp	r2, r1
 80053ae:	d100      	bne.n	80053b2 <memmove+0x2a>
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053ba:	e7f7      	b.n	80053ac <memmove+0x24>

080053bc <_sbrk_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	2300      	movs	r3, #0
 80053c0:	4d05      	ldr	r5, [pc, #20]	@ (80053d8 <_sbrk_r+0x1c>)
 80053c2:	4604      	mov	r4, r0
 80053c4:	4608      	mov	r0, r1
 80053c6:	602b      	str	r3, [r5, #0]
 80053c8:	f7fb fda2 	bl	8000f10 <_sbrk>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d102      	bne.n	80053d6 <_sbrk_r+0x1a>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	b103      	cbz	r3, 80053d6 <_sbrk_r+0x1a>
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	20000510 	.word	0x20000510

080053dc <memchr>:
 80053dc:	4603      	mov	r3, r0
 80053de:	b510      	push	{r4, lr}
 80053e0:	b2c9      	uxtb	r1, r1
 80053e2:	4402      	add	r2, r0
 80053e4:	4293      	cmp	r3, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	d101      	bne.n	80053ee <memchr+0x12>
 80053ea:	2000      	movs	r0, #0
 80053ec:	e003      	b.n	80053f6 <memchr+0x1a>
 80053ee:	7804      	ldrb	r4, [r0, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	428c      	cmp	r4, r1
 80053f4:	d1f6      	bne.n	80053e4 <memchr+0x8>
 80053f6:	bd10      	pop	{r4, pc}

080053f8 <_realloc_r>:
 80053f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fc:	4680      	mov	r8, r0
 80053fe:	4615      	mov	r5, r2
 8005400:	460c      	mov	r4, r1
 8005402:	b921      	cbnz	r1, 800540e <_realloc_r+0x16>
 8005404:	4611      	mov	r1, r2
 8005406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800540a:	f7ff bc47 	b.w	8004c9c <_malloc_r>
 800540e:	b92a      	cbnz	r2, 800541c <_realloc_r+0x24>
 8005410:	f7ff fbda 	bl	8004bc8 <_free_r>
 8005414:	2400      	movs	r4, #0
 8005416:	4620      	mov	r0, r4
 8005418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800541c:	f000 f81a 	bl	8005454 <_malloc_usable_size_r>
 8005420:	4285      	cmp	r5, r0
 8005422:	4606      	mov	r6, r0
 8005424:	d802      	bhi.n	800542c <_realloc_r+0x34>
 8005426:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800542a:	d8f4      	bhi.n	8005416 <_realloc_r+0x1e>
 800542c:	4629      	mov	r1, r5
 800542e:	4640      	mov	r0, r8
 8005430:	f7ff fc34 	bl	8004c9c <_malloc_r>
 8005434:	4607      	mov	r7, r0
 8005436:	2800      	cmp	r0, #0
 8005438:	d0ec      	beq.n	8005414 <_realloc_r+0x1c>
 800543a:	42b5      	cmp	r5, r6
 800543c:	462a      	mov	r2, r5
 800543e:	4621      	mov	r1, r4
 8005440:	bf28      	it	cs
 8005442:	4632      	movcs	r2, r6
 8005444:	f7ff fbb2 	bl	8004bac <memcpy>
 8005448:	4621      	mov	r1, r4
 800544a:	4640      	mov	r0, r8
 800544c:	f7ff fbbc 	bl	8004bc8 <_free_r>
 8005450:	463c      	mov	r4, r7
 8005452:	e7e0      	b.n	8005416 <_realloc_r+0x1e>

08005454 <_malloc_usable_size_r>:
 8005454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005458:	1f18      	subs	r0, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	bfbc      	itt	lt
 800545e:	580b      	ldrlt	r3, [r1, r0]
 8005460:	18c0      	addlt	r0, r0, r3
 8005462:	4770      	bx	lr

08005464 <_init>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	bf00      	nop
 8005468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546a:	bc08      	pop	{r3}
 800546c:	469e      	mov	lr, r3
 800546e:	4770      	bx	lr

08005470 <_fini>:
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005472:	bf00      	nop
 8005474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005476:	bc08      	pop	{r3}
 8005478:	469e      	mov	lr, r3
 800547a:	4770      	bx	lr
